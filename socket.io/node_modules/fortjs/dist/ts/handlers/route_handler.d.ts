import { TGuard, TShield } from "../types";
import { RouteInfo } from "../models";
import { IControllerRoute, IWorkerInfo, IRouteMatch } from "../interfaces";
export declare class RouteHandler {
    static get routerCollection(): Map<string, RouteInfo>;
    static get routesAsArray(): RouteInfo[];
    static findControllerFromPath(urlParts: string[]): RouteInfo;
    static getControllerFromName(name: string): RouteInfo;
    static get defaultRoute(): RouteInfo;
    static defaultRouteControllerName: string;
    static addToRouterCollection(value: IControllerRoute): void;
    static addShields(shields: Array<TShield>, className: string): void;
    static addWorker(newWorker: IWorkerInfo, className: string): void;
    static addGuards(guards: Array<TGuard>, className: string, workerName: string): void;
    static addPattern(pattern: string, className: string, workerName: string): void;
    static addExpected(type: string, className: string, workerName: string, expectedValue: any): void;
    static getExpectedQuery(controllerName: string, workerName: string): any;
    static getExpectedBody(controllerName: string, workerName: string): any;
    static getExpectedParam(controllerName: string, workerName: string): any;
    static addRouteToCache(url: string, route: IRouteMatch): void;
    static getRouteFromCache(url: string): IRouteMatch;
}
