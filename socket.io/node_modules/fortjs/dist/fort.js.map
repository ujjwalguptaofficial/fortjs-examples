{"version":3,"file":"fort.js","mappings":"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","sources":["webpack://fortjs/webpack/bootstrap","webpack://fortjs/webpack/runtime/define property getters","webpack://fortjs/webpack/runtime/hasOwnProperty shorthand","webpack://fortjs/webpack/runtime/make namespace object","webpack://fortjs/./src/enums/mime_type.ts","webpack://fortjs/./src/enums/http_method.ts","webpack://fortjs/./src/enums/http_status_code.ts","webpack://fortjs/./src/enums/etag_type.ts","webpack://fortjs/./src/enums/error_type.ts","webpack://fortjs/./src/enums/data_type.ts","webpack://fortjs/./src/enums/http_result_type.ts","webpack://fortjs/./src/enums/index.ts","webpack://fortjs/./src/helpers/json_result.ts","webpack://fortjs/./src/helpers/text_result.ts","webpack://fortjs/./src/helpers/html_result.ts","webpack://fortjs/./src/abstracts/component.ts","webpack://fortjs/./src/abstracts/controller.ts","webpack://fortjs/./src/abstracts/shield.ts","webpack://fortjs/./src/abstracts/guard.ts","webpack://fortjs/./src/abstracts/view_engine.ts","webpack://fortjs/./src/abstracts/wall.ts","webpack://fortjs/./src/abstracts/xml_parser.ts","webpack://fortjs/./src/abstracts/result_mapper.ts","webpack://fortjs/./src/abstracts/component_option.ts","webpack://fortjs/./src/abstracts/index.ts","webpack://fortjs/external commonjs \"mustache\"","webpack://fortjs/./src/extra/mustache_view_engine.ts","webpack://fortjs/external commonjs \"class-validator\"","webpack://fortjs/./src/extra/dto_validator.ts","webpack://fortjs/./src/extra/index.ts","webpack://fortjs/./src/constants/index.ts","webpack://fortjs/./src/utils/is_null_or_empty.ts","webpack://fortjs/./src/utils/is_null.ts","webpack://fortjs/./src/utils/is_array.ts","webpack://fortjs/./src/utils/promise_resolve.ts","webpack://fortjs/./src/utils/compare_string.ts","webpack://fortjs/external commonjs \"uniqid\"","webpack://fortjs/./src/utils/session_manager.ts","webpack://fortjs/./src/utils/index.ts","webpack://fortjs/./src/providers/cookie_wall.ts","webpack://fortjs/external commonjs \"content-type\"","webpack://fortjs/external node-commonjs \"querystring\"","webpack://fortjs/external commonjs \"multiparty\"","webpack://fortjs/./src/providers/post_data_evaluator_guard.ts","webpack://fortjs/./src/providers/memory_session_store.ts","webpack://fortjs/./src/providers/generic_xml_parser.ts","webpack://fortjs/./src/providers/index.ts","webpack://fortjs/./src/handlers/route_handler.ts","webpack://fortjs/external node-commonjs \"url\"","webpack://fortjs/./src/handlers/injector_handler.ts","webpack://fortjs/external node-commonjs \"path\"","webpack://fortjs/external commonjs \"negotiator\"","webpack://fortjs/./src/handlers/request_handler_helper.ts","webpack://fortjs/external node-commonjs \"fs\"","webpack://fortjs/external commonjs \"etag\"","webpack://fortjs/external commonjs \"fresh\"","webpack://fortjs/./src/handlers/file_handler.ts","webpack://fortjs/./src/handlers/controller_result_handler.ts","webpack://fortjs/./src/handlers/request_handler.ts","webpack://fortjs/./src/handlers/index.ts","webpack://fortjs/./src/constants/fort_global.ts","webpack://fortjs/./src/helpers/log_helper.ts","webpack://fortjs/./src/helpers/render_view.ts","webpack://fortjs/./src/helpers/download_result.ts","webpack://fortjs/./src/helpers/file_result.ts","webpack://fortjs/./src/helpers/redirect_result.ts","webpack://fortjs/./src/helpers/view_result.ts","webpack://fortjs/external commonjs \"fs-extra\"","webpack://fortjs/./src/helpers/get_view_from_file.ts","webpack://fortjs/./src/helpers/promise.ts","webpack://fortjs/./src/helpers/get_mime_type_from_extension.ts","webpack://fortjs/./src/helpers/remove_last_slash.ts","webpack://fortjs/./src/helpers/parse_match_route.ts","webpack://fortjs/./src/helpers/parse_cookie.ts","webpack://fortjs/./src/helpers/json_helper.ts","webpack://fortjs/./src/helpers/remove_first_slash.ts","webpack://fortjs/./src/helpers/reverse_loop.ts","webpack://fortjs/./src/helpers/get_data_type.ts","webpack://fortjs/./src/helpers/get_class_name.ts","webpack://fortjs/./src/helpers/remove_method_and_null_from_object.ts","webpack://fortjs/./src/helpers/get_result_based_on_mime.ts","webpack://fortjs/./src/helpers/get_mime_type_from_file_type.ts","webpack://fortjs/./src/helpers/split_route.ts","webpack://fortjs/./src/helpers/execute_validate.ts","webpack://fortjs/./src/helpers/validate_param_guard.ts","webpack://fortjs/./src/helpers/validate_body_guard.ts","webpack://fortjs/./src/helpers/validate_query_shield.ts","webpack://fortjs/./src/helpers/multi_format_result.ts","webpack://fortjs/./src/helpers/test/http_response_stub.ts","webpack://fortjs/./src/helpers/test/http_request_stub.ts","webpack://fortjs/./src/helpers/test/init_controller.ts","webpack://fortjs/./src/helpers/test/init_guard.ts","webpack://fortjs/./src/helpers/test/init_shield.ts","webpack://fortjs/./src/helpers/test/init_wall.ts","webpack://fortjs/./src/helpers/test/index.ts","webpack://fortjs/./src/helpers/index.ts","webpack://fortjs/./src/models/error_handler.ts","webpack://fortjs/./src/models/http_cookie.ts","webpack://fortjs/external node-commonjs \"http\"","webpack://fortjs/./src/models/fort.ts","webpack://fortjs/./src/models/router.ts","webpack://fortjs/./src/models/cookie_manager.ts","webpack://fortjs/./src/models/file_manager.ts","webpack://fortjs/./src/models/http_file.ts","webpack://fortjs/./src/models/logger.ts","webpack://fortjs/./src/models/route_info.ts","webpack://fortjs/./src/models/components.ts","webpack://fortjs/./src/models/worker_info.ts","webpack://fortjs/./src/models/index.ts","webpack://fortjs/./src/decorators/wrap_method_decorator.ts","webpack://fortjs/./src/decorators/worker.ts","webpack://fortjs/./src/decorators/shields.ts","webpack://fortjs/./src/decorators/guards.ts","webpack://fortjs/./src/decorators/route.ts","webpack://fortjs/./src/decorators/default_worker.ts","webpack://fortjs/./src/decorators/assign.ts","webpack://fortjs/./src/decorators/singleton.ts","webpack://fortjs/./src/decorators/validate.ts","webpack://fortjs/./src/decorators/body.ts","webpack://fortjs/./src/decorators/req_method.ts","webpack://fortjs/./src/decorators/index.ts","webpack://fortjs/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export enum MIME_TYPE {\n    Text = \"text/plain\",\n    Json = \"application/json\",\n    Html = \"text/html\",\n    FormUrlEncoded = \"application/x-www-form-urlencoded\",\n    Css = \"text/css\",\n    Csv = \"text/csv\",\n    Js = \"application/javascript\",\n    Bmp = \"image/bmp\",\n    Jpeg = \"image/jpeg\",\n    Gif = \"image/gif\",\n    Ico = \"image/x-icon\",\n    Png = \"image/png\",\n    Pdf = \"application/pdf\",\n    Svg = \"image/svg+xml\",\n    Rtf = \"application/rtf\",\n    Xml = \"application/xml\",\n    Xls = \"application/vnd.ms-excel\",\n    Xlsx = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    Ttf = \"font/ttf\",\n    Woff = \"font/woff\",\n    Woff2 = \"font/woff2\",\n    Eot = \"application/vnd.ms-fontobject\",\n    Otf = \"font/otf\",\n    Swf = \"application/x-shockwave-flash\",\n    Avi = \"video/avi\",\n    FormMultiPart = \"multipart/form-data\"\n}","export enum HTTP_METHOD {\n    Get = \"GET\",\n    Post = \"POST\",\n    Put = \"PUT\",\n    Patch = \"PATCH\",\n    Delete = \"DELETE\",\n    Options = \"OPTIONS\",\n    Head = \"HEAD\"\n}","export enum HTTP_STATUS_CODE {\n    BadRequest = 400,\n    Unauthorized = 401,\n    Forbidden = 403,\n    NotFound = 404,\n    Ok = 200,\n    Created = 201,\n    NoContent = 204,\n    Redirect = 302,\n    NotModified = 304,\n    MethodNotAllowed = 405,\n    NotAcceptable = 406,\n    InternalServerError = 500,\n}","export enum ETAG_TYPE {\n    Strong = \"strong\",\n    Weak = \"weak\"\n}","export enum ERROR_TYPE {\n    InvalidControllerName = \"invalid_controller_name\",\n    InvalidContentType = \"invalid_content_type\",\n    PortInUse = \"port_in_use\",\n    UndefinedViewEngine = \"undefined_view_engine\"\n}","export enum DATA_TYPE {\n    String = \"string\",\n    Number = \"number\",\n    Array = \"array\",\n    Object = \"object\",\n    Function = \"function\"\n}","export enum HTTP_RESULT_TYPE {\n    Default,\n    File,\n    Redirect,\n    FormattedResult\n}","export * from './mime_type';\nexport * from './http_method';\nexport * from './http_status_code';\nexport * from \"./etag_type\";\nexport * from \"./error_type\";\nexport * from \"./data_type\";\nexport * from \"./http_result_type\";","\nimport { HTTP_RESULT_TYPE, MIME_TYPE } from \"../enums\";\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\nimport { IHttpResult } from \"../interfaces\";\n\nexport const jsonResult = (value: any, statusCode?: HTTP_STATUS_CODE) => {\n    return {\n        contentType: MIME_TYPE.Json,\n        responseData: value,\n        statusCode: statusCode || HTTP_STATUS_CODE.Ok,\n        type: HTTP_RESULT_TYPE.Default\n    } as IHttpResult;\n};","import { HTTP_RESULT_TYPE, MIME_TYPE } from \"../enums\";\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\nimport { IHttpResult } from \"../interfaces\";\n\nexport const textResult = (text: string, statusCode?: HTTP_STATUS_CODE) => {\n    return {\n        contentType: MIME_TYPE.Text,\n        responseData: text,\n        statusCode: statusCode || HTTP_STATUS_CODE.Ok,\n        type: HTTP_RESULT_TYPE.Default\n    } as IHttpResult;\n};","import { HTTP_RESULT_TYPE, MIME_TYPE } from \"../enums\";\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\nimport { IHttpResult } from \"../interfaces\";\n\nexport const htmlResult = (html: string, statusCode?: HTTP_STATUS_CODE) => {\n    return {\n        contentType: MIME_TYPE.Html,\n        responseData: html,\n        statusCode: statusCode || HTTP_STATUS_CODE.Ok,\n        type: HTTP_RESULT_TYPE.Default\n    } as IHttpResult;\n};","import { FORT_GLOBAL } from \"../constants/fort_global\";\nimport { IHttpRequest, IHttpResponse, IComponentProp } from \"../interfaces\";\nimport { Logger } from \"../models\";\n\nexport class Component {\n    get request() {\n        return this.componentProp_.request as IHttpRequest;\n    }\n\n    get response() {\n        return this.componentProp_.response as IHttpResponse;\n    }\n\n    get query() {\n        return this.componentProp_.query;\n    }\n\n    get session() {\n        return this.componentProp_.session;\n    }\n\n    get cookie() {\n        return this.componentProp_.cookie;\n    }\n\n    get data() {\n        return this.componentProp_.data;\n    }\n\n    get logger(): Logger {\n        return FORT_GLOBAL.logger;\n    }\n\n    get option() {\n        return FORT_GLOBAL.componentOption;\n    }\n\n    private componentProp_: IComponentProp;\n\n}","import { IControllerTestData } from \"../interfaces\";\nimport { initController } from \"../helpers\";\nimport { Component } from \"./component\";\n\nexport abstract class Controller extends Component {\n\n    get body() {\n        return this['componentProp_'].body;\n    }\n\n    get param() {\n        return this['componentProp_'].param;\n    }\n\n    get file() {\n        return this['componentProp_'].file;\n    }\n\n    // eslint-disable-next-line\n    constructor(...args) {\n        super();\n    }\n\n    initialize(data?: IControllerTestData) {\n        initController(this, data);\n    }\n\n}","import { IHttpResult } from \"../interfaces\";\nimport { Logger } from \"../models\";\nimport { IShieldTestData, initShield } from \"../helpers\";\nimport { FORT_GLOBAL } from \"../constants/fort_global\";\nimport { Component } from \"./component\";\n\nexport abstract class Shield extends Component {\n    get workerName() {\n        return this['componentProp_'].workerName;\n    }\n\n    get logger(): Logger {\n        return FORT_GLOBAL.logger;\n    }\n\n    get option() {\n        return FORT_GLOBAL.componentOption;\n    }\n\n    abstract protect(...args): Promise<IHttpResult | void>;\n\n    // eslint-disable-next-line\n    constructor(...args) {\n        super();\n    }\n\n    initialize(data?: IShieldTestData) {\n        return initShield(this, data);\n    }\n}\n\n","import { IHttpResult } from \"../interfaces\";\nimport { Logger } from \"../models\";\nimport { IGuardTestData, initGuard } from \"../helpers\";\nimport { FORT_GLOBAL } from \"../constants/fort_global\";\nimport { Component } from \"./component\";\n\nexport abstract class Guard extends Component {\n    get body() {\n        return this['componentProp_'].body;\n    }\n\n    get param() {\n        return this['componentProp_'].param;\n    }\n\n    get file() {\n        return this['componentProp_'].file;\n    }\n\n    get workerName() {\n        return this['componentProp_'].workerName;\n    }\n\n    abstract check(...args): Promise<IHttpResult | void>;\n\n    get logger(): Logger {\n        return FORT_GLOBAL.logger;\n    }\n\n    get option() {\n        return FORT_GLOBAL.componentOption;\n    }\n\n    // eslint-disable-next-line\n    constructor(...args) {\n        super();\n    }\n\n    initialize(data?: IGuardTestData) {\n        return initGuard(this, data);\n    }\n}","import { IViewEngineData } from \"../interfaces\";\n\nexport abstract class ViewEngine {\n    abstract render(value: IViewEngineData): Promise<string>;\n}","import { IHttpResult } from \"../interfaces\";\nimport { IWallTestData, initWall } from \"../helpers\";\nimport { Component } from \"./component\";\n\nexport abstract class Wall extends Component {\n\n    abstract onIncoming(...args): Promise<IHttpResult | void>;\n\n    // eslint-disable-next-line\n    onOutgoing(finalResult: IHttpResult, ...args) {\n    }\n\n    // eslint-disable-next-line\n    constructor(...args) {\n        super();\n    }\n\n    initialize(data?: IWallTestData) {\n        return initWall(this, data);\n    }\n\n}","export abstract class XmlParser {\n    abstract parse(xml: string): Promise<string>;\n}","import { MIME_TYPE } from \"../enums\";\n\nexport abstract class ResultMapper {\n    abstract map(type: MIME_TYPE, result, setMimeType?: (type) => void): any;\n}","export class ComponentOption {\n    toModel(expectedClass, from) {\n        const result = new expectedClass();\n        for (const prop in result) {\n            result[prop] = from[prop];\n        }\n        return result;\n    }\n\n    extractHash(expectedHash, from) {\n        for (const prop in expectedHash) {\n            expectedHash[prop] = from[prop];\n        }\n        return expectedHash;\n    }\n\n    isNull(value) {\n        return value == null;\n    }\n\n    isNullOrEmpty(value: string) {\n        return value == null || value.length === 0;\n    }\n\n    isEmpty(value: string) {\n        return value.length === 0;\n    }\n}","export * from './controller';\nexport * from './shield';\nexport * from './guard';\nexport * from './view_engine';\nexport * from './wall';\nexport * from \"./xml_parser\";\nexport * from './result_mapper';\nexport * from \"./component_option\";","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"mustache\");","import * as Mustache from \"mustache\";\nimport { IViewEngineData } from \"../interfaces\";\nimport { getViewFromFile } from \"../helpers\";\nimport { ViewEngine } from \"../abstracts\";\n\nexport class MustacheViewEngine implements ViewEngine {\n\n    render(value: IViewEngineData) {\n        return getViewFromFile({\n            fileLocation: value.view\n        }).then(viewData => {\n            return Mustache.render(viewData, value.model);\n        })\n    }\n}","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"class-validator\");","import { ValidatorOptions, validate } from \"class-validator\";\nimport { IDtoValidator } from \"../interfaces\";\nimport { ErrorResultMapper } from \"../types\";\nimport { jsonResult } from \"../helpers\";\nimport { HTTP_STATUS_CODE } from \"../enums\";\n\nconst defaultErrorResultMapper = (validationResult) => {\n    return jsonResult({\n        error: {\n            message: validationResult,\n            type: \"ValidationError\",\n        }\n    }, HTTP_STATUS_CODE.BadRequest);\n};\n\nexport class DtoValidator implements IDtoValidator {\n\n    validatorOption: ValidatorOptions;\n    getErrorResult: ErrorResultMapper;\n\n    constructor(validatorOption: ValidatorOptions = null, errorResultMapper: ErrorResultMapper = defaultErrorResultMapper) {\n        // const defaultValidatorOption = {\n        //     // whitelist: true,\n        //     // forbidNonWhitelisted: true,\n        //     // forbidUnknownValues: false\n        // } as ValidatorOptions;\n        this.validatorOption = validatorOption;\n        // Object.assign(defaultValidatorOption, validatorOption);\n        this.validatorOption = validatorOption;\n        this.getErrorResult = errorResultMapper;\n    }\n\n    async validate(dtoInstance: any) {\n        const errors = await validate(dtoInstance, this.validatorOption);\n        if (errors.length > 0) {\n            const error = errors[0]\n            const constraint = Object.keys(error.constraints)[0]\n            const errMessage = error.constraints[constraint]\n            if (error) {\n                return errMessage;\n            }\n        }\n    }\n}","export * from './mustache_view_engine';\nexport * from \"./dto_validator\";","export const CONTENT_TYPE = \"Content-Type\";\nexport const APP_NAME = \"fort\";\nexport const COOKIE = \"Cookie\";\nexport const SET_COOKIE = 'Set-Cookie';\nexport const CURRENT_PATH = process.cwd();\nexport const CONTENT_LENGTH = \"Content-Length\";\nexport const CONSTRUCTOR = \"const_constructor\";\n\nexport * from \"./fort_global\";","export const isNullOrEmpty = (value: string) => {\n    return value == null || value.length === 0;\n};","export const isNull = (value) => {\n    return value == null;\n};","export const isArray = (value) => {\n    return Array.isArray(value);\n};","export const promiseResolve = <T>(value: any) => {\n    return Promise.resolve(value as T);\n};","export const compareString = (str1, str2) => {\n    return new RegExp('^' + str1 + '$', 'i').test(str2);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"uniqid\");","import { FORT_GLOBAL } from \"../constants\";\nimport { ISessonStore } from \"../interfaces\";\nimport { CookieManager } from \"../models\";\nimport * as getUniqId from \"uniqid\";\nimport { TSessionStore } from \"../types\";\n\nexport class SessionManager {\n\n    sessionId: string;\n    protected cookie: CookieManager;\n    sessionStore: ISessonStore;\n\n    constructor(cookie: CookieManager, sessionStore: TSessionStore) {\n        this.sessionId = cookie.cookieCollection[FORT_GLOBAL.appSessionIdentifier];\n        this.sessionStore = new sessionStore(this.sessionId);\n        this.cookie = cookie;\n    }\n\n    protected createSession(sessionId?) {\n        const now = new Date();\n        this.sessionId = sessionId != null ? sessionId : getUniqId();\n        this.cookie.addCookie({\n            name: FORT_GLOBAL.appSessionIdentifier,\n            value: this.sessionId,\n            httpOnly: true,\n            path: \"/\",\n            expires: new Date(now.setMinutes(now.getMinutes() + FORT_GLOBAL.sessionTimeOut)),\n            maxAge: FORT_GLOBAL.sessionTimeOut * 60\n        });\n    }\n\n    protected destroySession() {\n        const cookie = this.cookie.getCookie(FORT_GLOBAL.appSessionIdentifier);\n        cookie.httpOnly = true;\n        cookie.path = \"/\";\n        this.cookie.removeCookie(cookie);\n    }\n\n    get(key: string) {\n        return this.sessionStore.get(key);\n    }\n\n    isExist(key: string) {\n        return this.sessionStore.isExist(key);\n    }\n\n    getAll() {\n        return this.sessionStore.getAll();\n    }\n\n    async set(key: string, val: any) {\n        const savedValue = await this.sessionStore.isAnyExist();\n        if (savedValue === false) {\n            this.createSession();\n            this.sessionStore.sessionId = this.sessionId;\n        }\n        await this.sessionStore.set(key, val);\n    }\n\n    setMany(values: { [key: string]: any }) {\n        return this.sessionStore.setMany(values);\n    }\n\n    remove(key: string) {\n        return this.sessionStore.remove(key);\n    }\n\n    async clear() {\n        // remove session values\n        await this.sessionStore.clear();\n        // expire cookie in browser\n        this.destroySession();\n    }\n}","export * from './is_null_or_empty';\nexport * from './is_null';\nexport * from './is_array';\nexport * from './promise_resolve';\nexport * from './compare_string';\nexport * from './session_manager';","import { Wall } from \"../abstracts\";\nimport { COOKIE, FORT_GLOBAL } from \"../constants\";\nimport { parseCookie } from \"../helpers\";\nimport { IHttpResult } from \"../interfaces\";\nimport { CookieManager } from \"../models\";\nimport { SessionManager } from \"../utils\";\n\nexport class CookieEvaluatorWall extends Wall {\n    parseCookieFromRequest() {\n        const componentProps = this['componentProp_'];\n        if (FORT_GLOBAL.shouldParseCookie === false) {\n            componentProps.cookie = new CookieManager({});\n            return;\n        }\n        const request = this.request;\n        const rawCookie = (request.headers[COOKIE] || request.headers[\"cookie\"]) as string;\n        const parsedCookies = parseCookie(rawCookie);\n        const cookie = new CookieManager(parsedCookies);\n        const session = new SessionManager(cookie, FORT_GLOBAL.sessionStore);\n        componentProps.session = session;\n        componentProps.cookie = cookie;\n    }\n\n    async onIncoming(): Promise<void | IHttpResult> {\n        this.parseCookieFromRequest();\n    }\n}","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"content-type\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"querystring\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"multiparty\");","import { Guard } from \"../abstracts\";\nimport { HTTP_METHOD, HTTP_STATUS_CODE } from \"../enums\";\nimport { JsonHelper, promise, textResult } from \"../helpers\";\nimport { FileManager } from \"../models\";\nimport { CONTENT_TYPE } from \"../constants\";\nimport { MIME_TYPE } from \"../enums\";\nimport * as ContentType from \"content-type\";\nimport * as QueryString from 'querystring';\nimport * as Multiparty from \"multiparty\";\nimport { IMultiPartParseResult } from \"../interfaces\";\nimport * as http from \"http\";\n\nexport class PostDataEvaluatorGuard extends Guard {\n\n    async check() {\n        try {\n            const postResult = await this.handlePostData();\n            const componentProps = this['componentProp_'];\n            componentProps.file = postResult[0];\n            componentProps.body = postResult[1];\n        } catch (error) {\n            return textResult(error.message || `Invalid body data. Check your data format.`, HTTP_STATUS_CODE.BadRequest);\n        }\n    }\n\n    async handlePostData() {\n        if (this.request.method === HTTP_METHOD.Get) {\n            return [new FileManager({}), {}];\n        }\n        return this.parsePostData();\n    }\n\n    private getPostRawData_(): Promise<string> {\n        const body = [];\n        return promise((res, rej) => {\n            (this.request as http.IncomingMessage).on('data', (chunk) => {\n                body.push(chunk);\n            }).on('end', () => {\n                const bodyBuffer = Buffer.concat(body);\n                res(bodyBuffer.toString());\n            }).on(\"error\", function (err) {\n                rej(err);\n            });\n        });\n    }\n\n    private parseMultiPartData_(): Promise<IMultiPartParseResult> {\n        return promise((res, rej) => {\n            new Multiparty.Form().parse(this.request as http.IncomingMessage, (err, fields, files) => {\n                if (err) {\n                    rej(err);\n                }\n                else {\n                    const result: IMultiPartParseResult = {\n                        field: {},\n                        file: {}\n                    };\n                    for (const field in fields) {\n                        result.field[field] = fields[field].length === 1 ? fields[field][0] : fields[field];\n                    }\n                    for (const file in files) {\n                        result.file[file] = files[file].length === 1 ? files[file][0] : files[file];\n                    }\n                    res(result);\n                }\n            });\n        });\n    }\n\n    async parsePostData() {\n        let contentType = this.request.headers[CONTENT_TYPE] || this.request.headers[\"content-type\"];\n        if (contentType != null) {\n            contentType = ContentType.parse(contentType as string).type;\n        }\n        if (contentType === MIME_TYPE.FormMultiPart) {\n            const multipartyResult = await this.parseMultiPartData_();\n            return [new FileManager(multipartyResult.file), multipartyResult.field];\n        }\n        else {\n            let postData;\n            const bodyDataAsString = await this.getPostRawData_();\n            switch (contentType) {\n                case MIME_TYPE.Json:\n                    postData = JsonHelper.parse(bodyDataAsString);\n                    break;\n                case MIME_TYPE.Text:\n                case MIME_TYPE.Html:\n                    postData = bodyDataAsString; break;\n                case MIME_TYPE.FormUrlEncoded:\n                    postData = QueryString.parse(bodyDataAsString); break;\n                case MIME_TYPE.Xml:\n                    postData = new (this['componentProp_'].global as any).xmlParser().parse(bodyDataAsString);\n                    break;\n                default:\n                    postData = {};\n            }\n            return [new FileManager({}), postData];\n        }\n    }\n}","import { ISessonStore } from \"../interfaces\";\n\nconst sessionValues: Map<string, { [key: string]: any }> = new Map();\n\nexport class MemorySessionStore implements ISessonStore {\n    sessionId: string;\n\n    constructor(sessionId: string) {\n        this.sessionId = sessionId;\n    }\n\n    private getSessionValue_() {\n        return sessionValues.get(this.sessionId);\n    }\n\n    async isAnyExist() {\n        return this.getSessionValue_() != null;\n    }\n\n    async get(key: string): Promise<any> {\n        const savedValue = this.getSessionValue_();\n        return savedValue != null ? savedValue[key] : null\n    }\n\n    async getAll(): Promise<{ [key: string]: any; }> {\n        const savedValue = this.getSessionValue_();\n        return savedValue || {};\n    }\n\n    async isExist(key: string): Promise<boolean> {\n        const savedValue = this.getSessionValue_()\n        return savedValue == null ? false : savedValue[key] != null;\n    }\n\n    async clear(): Promise<void> {\n        // remove session values\n        sessionValues.delete(this.sessionId);\n    }\n\n    async set(key: string, val: any) {\n        const savedValue = this.getSessionValue_();\n        if (savedValue == null) {\n            sessionValues.set(this.sessionId, {\n                [key]: val\n            });\n        }\n        else {\n            savedValue[key] = val;\n        }\n    }\n\n    setMany(values: { [key: string]: any }) {\n        return Promise.all(\n            Object.keys(values).map((key) => {\n                return this.set(key, values[key]);\n            })\n        );\n    }\n\n    async remove(key: string) {\n        const savedValue = this.getSessionValue_();\n        if (savedValue != null) {\n            savedValue[key] = null;\n        }\n    }\n}","import { XmlParser } from \"../abstracts\";\nimport { IException } from \"../interfaces\";\n\nexport class BlankXmlParser implements XmlParser {\n    parse(): Promise<string> {\n        // tslint:disable-next-line\n        throw {\n            message: \"no xml parser configured\"\n        } as IException;\n    }\n}","export * from \"./cookie_wall\";\nexport * from \"./post_data_evaluator_guard\";\nexport * from \"./memory_session_store\";\nexport * from \"./generic_xml_parser\";","import { TGuard, TShield } from \"../types\";\nimport { compareString, isNull } from \"../utils\";\nimport { RouteInfo, WorkerInfo } from \"../models\";\nimport { IRouteInfo, IControllerRoute, IWorkerInfo, IRouteMatch } from \"../interfaces\";\nimport { getDataType } from \"../helpers\";\n\nconst routerCollection = new Map<string, RouteInfo>();\n\nconst pushRouterIntoCollection = (route: IRouteInfo) => {\n    const routeObj = new RouteInfo(route);\n    routerCollection.set(route.controllerName, routeObj);\n};\n\nconst getWorkerPattern = (parentRoute: IControllerRoute, pattern: string) => {\n    const routeWithParent = (isNull(parentRoute.path) || parentRoute.path === \"/*\") ? pattern : `${parentRoute.path}${pattern}`;\n    return routeWithParent;\n};\n\nconst routeCache = new Map<string, IRouteMatch>();\n\nexport class RouteHandler {\n\n    static get routerCollection() {\n        return routerCollection;\n    }\n\n    static get routesAsArray() {\n        return Array.from(routerCollection.keys()).map(workerName => {\n            return routerCollection.get(workerName);\n        });\n    }\n\n    static findControllerFromPath(urlParts: string[]) {\n        for (const controller of routerCollection.values()) {\n            let isMatched: boolean;\n            const patternSplit = controller.pathSplitted;\n            patternSplit.every((patternPart, i) => {\n                isMatched = compareString(urlParts[i], patternPart);\n                return isMatched;\n            });\n            if (isMatched === true) {\n                return controller;\n            }\n        }\n    }\n\n    static getControllerFromName(name: string) {\n        return routerCollection.get(name);\n    }\n\n    static get defaultRoute() {\n        return routerCollection.get(RouteHandler.defaultRouteControllerName);\n    }\n\n    static defaultRouteControllerName: string;\n\n    static addToRouterCollection(value: IControllerRoute) {\n        const route = routerCollection.get(value.controller.name);\n        if (route == null) {\n            pushRouterIntoCollection({\n                workers: new Map(),\n                controller: value.controller,\n                controllerName: value.controller.name,\n                path: value.path,\n                shields: [],\n                values: []\n            });\n        }\n        else {\n            route.controller = value.controller;\n            route.path = value.path;\n            // change pattern value since we have controller name now.\n            route.workers.forEach(actionInfo => {\n                actionInfo.pattern = getWorkerPattern(value, actionInfo.pattern);\n            })\n        }\n    }\n\n    static addShields(shields: Array<TShield>, className: string) {\n        const route = routerCollection.get(className);\n        if (route == null) {\n            pushRouterIntoCollection({\n                workers: new Map(),\n                controller: null,\n                controllerName: className,\n                shields: shields,\n                path: null,\n                values: []\n            });\n        }\n        else {\n            route.shields = route.shields ? [...route.shields, ...shields] : shields;\n        }\n    }\n\n    static addWorker(newWorker: IWorkerInfo, className: string) {\n\n        const workerName = newWorker.workerName;\n        const route = routerCollection.get(className);\n        if (route == null) {\n            pushRouterIntoCollection({\n                workers: new Map([\n                    [workerName, new WorkerInfo(newWorker)]\n                ]),\n                controller: null,\n                controllerName: className,\n                shields: [],\n                path: null,\n                values: []\n            });\n        }\n        else {\n            const savedAction = route.workers.get(workerName);\n            if (savedAction == null) {\n                newWorker.pattern = getWorkerPattern(route, newWorker.pattern);\n                route.workers.set(workerName, new WorkerInfo(newWorker));\n            }\n            else {\n                savedAction.methodsAllowed = newWorker.methodsAllowed;\n                savedAction.pattern = getWorkerPattern(route, savedAction.pattern);\n                // route.path == null ? savedAction.pattern : `/${route.path}${savedAction.pattern}`;\n            }\n        }\n    }\n\n    static addGuards(guards: Array<TGuard>, className: string, workerName: string) {\n\n        const route = routerCollection.get(className);\n        const pattern = workerName.toLowerCase();\n        if (route == null) {\n            pushRouterIntoCollection({\n                workers: new Map([\n                    [workerName, new WorkerInfo({\n                        workerName: workerName,\n                        guards: guards,\n                        methodsAllowed: null,\n                        pattern: pattern,\n                        values: []\n                    })]\n                ]),\n                controller: null,\n                controllerName: className,\n                shields: [],\n                path: null,\n                values: []\n            });\n        }\n        else {\n            const savedAction = route.workers.get(workerName);\n            if (savedAction == null) {\n                route.workers.set(\n                    workerName,\n                    new WorkerInfo({\n                        workerName: workerName,\n                        guards: guards,\n                        methodsAllowed: null,\n                        pattern: pattern,\n                        values: []\n                    })\n                );\n            }\n            else {\n                savedAction.guards = savedAction.guards ? [...savedAction.guards, ...guards]\n                    : guards;\n            }\n        }\n    }\n\n    static addPattern(pattern: string, className: string, workerName: string) {\n        const route = routerCollection.get(className);\n        if (route == null) {\n            pushRouterIntoCollection({\n                workers: new Map([\n                    [workerName, new WorkerInfo({\n                        workerName: workerName,\n                        guards: [],\n                        methodsAllowed: null,\n                        pattern: pattern,\n                        values: []\n                    })]\n                ]),\n                controller: null,\n                controllerName: className,\n                shields: [],\n                path: null,\n                values: []\n            });\n        }\n        else {\n            const savedAction = route.workers.get(workerName);\n            const workerRouteWithController = getWorkerPattern(route, pattern);\n            if (savedAction == null) {\n                route.workers.set(\n                    workerName,\n                    new WorkerInfo({\n                        workerName: workerName,\n                        guards: [],\n                        methodsAllowed: null,\n                        pattern: workerRouteWithController,\n                        values: []\n                    })\n                );\n            }\n            else {\n                savedAction.pattern = workerRouteWithController;\n            }\n        }\n    }\n\n    static addExpected(type: string, className: string, workerName: string, expectedValue: any) {\n\n        for (const prop in expectedValue) {\n            const propValue = expectedValue[prop];\n            expectedValue[prop] = getDataType(propValue);\n        }\n\n        const pattern = workerName.toLowerCase();\n        const router = routerCollection.get(className);\n        const worker = new WorkerInfo({\n            workerName: workerName,\n            guards: [],\n            methodsAllowed: null,\n            pattern: pattern,\n            values: []\n        } as IWorkerInfo);\n        switch (type) {\n            case \"body\":\n                worker.expectedBody = expectedValue;\n                break;\n            case \"query\":\n                worker.expectedQuery = expectedValue;\n                break;\n            case \"param\":\n                worker.expectedParam = expectedValue;\n                break;\n        }\n        if (router == null) {\n            pushRouterIntoCollection({\n                workers: new Map([\n                    [workerName, worker]\n                ]),\n                controller: null,\n                controllerName: className,\n                shields: [],\n                path: null,\n                values: []\n            });\n        }\n        else {\n            const savedAction = router.workers.get(workerName);\n            if (savedAction == null) {\n                router.workers.set(workerName, worker);\n            }\n            else {\n                savedAction.expectedQuery = worker.expectedQuery;\n                savedAction.expectedBody = worker.expectedBody;\n                savedAction.expectedParam = worker.expectedParam;\n            }\n        }\n    }\n\n    static getExpectedQuery(controllerName: string, workerName: string) {\n        return routerCollection.get(controllerName).workers.get(workerName).expectedQuery;\n    }\n\n    static getExpectedBody(controllerName: string, workerName: string) {\n        return routerCollection.get(controllerName).workers.get(workerName).expectedBody;\n    }\n\n    static getExpectedParam(controllerName: string, workerName: string) {\n        return routerCollection.get(controllerName).workers.get(workerName).expectedParam;\n    }\n\n    static addRouteToCache(url: string, route: IRouteMatch) {\n        routeCache.set(url, route);\n    }\n\n    static getRouteFromCache(url: string) {\n        return routeCache.get(url);\n    }\n\n}","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"url\");","import { CONSTRUCTOR } from \"../constants\";\n\ntype InjectorStoreInfo = Map<string, any[]>;\n\n// this stores information of injector values that are available per class & worker\n// const injectorStoreInfos: InjectorStoreInfo[] = [];\nconst injectorStoreInfos: Map<string, InjectorStoreInfo> = new Map();\n// this stores injector values\nconst injectorValues: any[] = [];\n// this stores the singletons name & their respective index in injector values\nconst singletons: Map<string, number> = new Map();\n\nexport class InjectorHandler {\n\n    static addWorkerValue(className: string, methodName: string, paramIndex, paramValue, shouldFindIndex = true): number {\n\n        if (shouldFindIndex === true) {\n            const paramValueIndex = injectorValues.indexOf(paramValue);\n            if (paramValueIndex < 0) {\n                paramValue = injectorValues.push(paramValue) - 1;\n            }\n            else {\n                paramValue = paramValueIndex;\n            }\n        }\n\n        const savedValue = injectorStoreInfos.get(className);\n        if (savedValue == null) {\n            const methods = [];\n            methods[paramIndex] = paramValue;\n\n            const value = new Map();\n            value.set(methodName, methods);\n\n            injectorStoreInfos.set(className, value);\n        }\n        else {\n            let savedMethod = savedValue.get(methodName);\n            if (savedMethod == null) {\n                savedMethod = [];\n                savedValue.set(methodName, savedMethod);\n            }\n            savedMethod[paramIndex] = paramValue;\n        }\n\n        return paramValue;\n    }\n\n    static getConstructorValues(className: string) {\n        return this.getMethodValues(className, CONSTRUCTOR, null);\n    }\n\n    static getMethodValues(className: string, methodName: string, component) {\n        const savedValue = injectorStoreInfos.get(className);\n        if (savedValue != null) {\n            const methodArgs = savedValue.get(methodName);\n            if (methodArgs != null) {\n                return methodArgs.map(injectorValueIndex => {\n                    const value = injectorValues[injectorValueIndex];\n                    switch (value['__fortReqType__']) {\n                        case \"body\":\n                        case \"query\":\n                        case \"param\":\n                            return value.inject(component);\n                    }\n                    return value;\n                });\n            }\n        }\n        return [];\n    }\n\n    static addSingleton(className: string, methodName: string, paramIndex, paramValue) {\n        const singletonClassName = paramValue.name;\n        if (singletonClassName) {\n            const singletonValueStored = singletons.get(singletonClassName);\n            if (singletonValueStored == null) {\n                singletons.set(singletonClassName,\n                    InjectorHandler.addWorkerValue(className, methodName, paramIndex, new paramValue())\n                );\n            }\n            else {\n                InjectorHandler.addWorkerValue(className, methodName, paramIndex, singletonValueStored, false);\n            }\n        }\n    }\n}","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"path\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"negotiator\");","import { HTTP_STATUS_CODE, MIME_TYPE, HTTP_METHOD, HTTP_RESULT_TYPE } from \"../enums\";\nimport { CONTENT_TYPE, SET_COOKIE } from \"../constants\";\nimport { FORT_GLOBAL } from \"../constants/fort_global\";\nimport * as Negotiator from \"negotiator\";\nimport { IComponentProp, IException, IHttpResult } from \"../interfaces\";\nimport { textResult, getResultBasedOnMiMe } from \"../helpers\";\nimport { HttpFormatResult } from \"../types\";\n\nexport class RequestHandlerHelper {\n    protected componentProps: IComponentProp;\n\n    protected controllerResult: IHttpResult;\n\n    get request() {\n        return this.componentProps.request;\n    }\n\n    get response() {\n        return this.componentProps.response;\n    }\n\n    protected getContentTypeFromNegotiation(type: MIME_TYPE) {\n        const negotiator = new Negotiator(this.request);\n        let availableTypes: MIME_TYPE[] = this.getAvailableTypes_(type);\n        if (availableTypes == null) {\n            availableTypes = [type];\n        }\n        return negotiator.mediaType(availableTypes) as MIME_TYPE;\n    }\n\n    protected getContentTypeFromNegotiationHavingMultipleTypes(types: MIME_TYPE[]) {\n        const negotiator = new Negotiator(this.request);\n        return negotiator.mediaType(types) as MIME_TYPE;\n    }\n\n    private getAvailableTypes_(type: MIME_TYPE) {\n        switch (type) {\n            case MIME_TYPE.Json:\n            case MIME_TYPE.Xml:\n                return [MIME_TYPE.Json, MIME_TYPE.Xml];\n            case MIME_TYPE.Html:\n            case MIME_TYPE.Css:\n            case MIME_TYPE.Csv:\n            case MIME_TYPE.Js:\n            case MIME_TYPE.Rtf:\n            case MIME_TYPE.Text:\n                return [MIME_TYPE.Text, MIME_TYPE.Html, MIME_TYPE.Js,\n                MIME_TYPE.Css, MIME_TYPE.Rtf, MIME_TYPE.Csv];\n        }\n        return null;\n    }\n\n    protected onBadRequest(error) {\n        return new FORT_GLOBAL.errorHandler().onBadRequest(error).then(data => {\n            return this.onResultFromError_(data);\n        });\n    }\n\n    protected onForbiddenRequest() {\n        return new FORT_GLOBAL.errorHandler().onForbiddenRequest().then(data => {\n            return this.onResultFromError_(data);\n        });\n    }\n\n    protected onNotAcceptableRequest() {\n        return new FORT_GLOBAL.errorHandler().onNotAcceptableRequest().then(data => {\n            return this.onResultFromError_(data);\n        });\n    }\n\n    protected onNotFound() {\n        return new FORT_GLOBAL.errorHandler().onNotFound(this.request.url).then(data => {\n            return this.onResultFromError_(data);\n        });\n    }\n\n    protected onMethodNotAllowed(allowedMethods: HTTP_METHOD[]) {\n        return new FORT_GLOBAL.errorHandler().onMethodNotAllowed().then(data => {\n            this.response.setHeader(\"Allow\", allowedMethods.join(\",\"));\n            return this.onResultFromError_(data);\n        });\n    }\n\n    // it won't execute wallOutgoing as if there is some issue in wallOutgoing\n    // then it would become an infinite loop\n    // treat it as someone comes to your fort & they start doing things \n    // which was not supposed to be done\n    // then you don't follow regular rules but just throw them from anywhere\n    protected onErrorOccured(error) {\n        if (typeof error === 'string') {\n            error = {\n                message: error\n            } as IException;\n        }\n        return new FORT_GLOBAL.errorHandler().onServerError(error).then(data => {\n            this.controllerResult = data;\n            return this.returnResultFromError_();\n        }).catch(ex => {\n            const response = {\n                message: ex.message,\n                stack: ex.stack,\n                type: ex.type\n            };\n            this.controllerResult = JSON.stringify(response) as any;\n            return this.returnResultFromError_();\n        });\n    }\n\n    protected onRequestOptions(allowedMethods: HTTP_METHOD[]) {\n        this.response.setHeader(\"Allow\", allowedMethods.join(\",\"));\n        return this.onResultFromError_(textResult(\"\"));\n    }\n\n    private onResultFromError_(result: IHttpResult) {\n        this.controllerResult = result;\n        this.returnResultFromError_();\n    }\n\n    setCookie() {\n        if (FORT_GLOBAL.shouldParseCookie === false) return;\n        (this.componentProps.cookie['responseCookie_']).forEach(value => {\n            this.response.setHeader(SET_COOKIE, value);\n        });\n    }\n\n    private returnResultFromError_() {\n        const result = this.controllerResult;\n        this.setCookie();\n\n        switch (result.type) {\n            case HTTP_RESULT_TYPE.Default:\n                {\n                    const contentType = result.contentType || MIME_TYPE.Text;\n                    const negotiateMimeType = this.getContentTypeFromNegotiation(contentType) as MIME_TYPE;\n                    this.endResponse_(negotiateMimeType != null ? negotiateMimeType : contentType);\n                }\n                break;\n            case HTTP_RESULT_TYPE.FormattedResult:\n                return this.handleFormatResult_();\n        }\n    }\n\n    protected handleFormatResult_(shouldSendFirstMatch = false) {\n        const controllerResult = this.controllerResult;\n        const responseData = controllerResult.responseData as HttpFormatResult;\n        const negotiateMimeType = this.getContentTypeFromNegotiationHavingMultipleTypes(Object.keys(responseData) as MIME_TYPE[]);\n        let key = Object.keys(responseData).find(qry => qry === negotiateMimeType);\n        if (key != null) {\n            controllerResult.responseData = responseData[key]();\n            this.endResponse_(negotiateMimeType);\n        }\n        else if (shouldSendFirstMatch === true) {\n            key = Object.keys(responseData)[0];\n            controllerResult.responseData = responseData[key]();\n            this.endResponse_(negotiateMimeType);\n        }\n        else {\n            return this.onNotAcceptableRequest();\n        }\n    }\n\n    protected endResponse_(negotiateMimeType: MIME_TYPE) {\n\n        const data = getResultBasedOnMiMe(negotiateMimeType,\n            (this.controllerResult).responseData\n            , (type: MIME_TYPE) => {\n                negotiateMimeType = type;\n            }\n        );\n\n        if (this.response.headersSent) {\n            console.trace(\"Request is finished, but triggered again\");\n            return;\n        }\n\n        this.response.writeHead(this.controllerResult.statusCode || HTTP_STATUS_CODE.Ok,\n            { [CONTENT_TYPE]: negotiateMimeType });\n        this.response.end(data);\n    }\n\n}","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"etag\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fresh\");","import { HTTP_STATUS_CODE, MIME_TYPE, ETAG_TYPE } from \"../enums\";\nimport { FORT_GLOBAL } from \"../constants/fort_global\";\nimport * as path from \"path\";\nimport { CONTENT_TYPE } from \"../constants\";\nimport { RequestHandlerHelper } from \"./request_handler_helper\";\nimport * as Fs from \"fs\";\nimport { getMimeTypeFromFileType, promise } from \"../helpers\";\nimport * as etag from \"etag\";\nimport * as fresh from \"fresh\";\nimport { isNullOrEmpty } from \"../utils\";\n\ntype FileInfo = {\n    folder: string,\n    file: string;\n};\nexport class FileHandler extends RequestHandlerHelper {\n\n    private getFileInfoFromUrl_(urlPath: string) {\n        const splittedValue = urlPath.split(\"/\");\n        const fileInfo = {\n            file: \"\"\n        } as FileInfo;\n        if (splittedValue.length > 2 || !isNullOrEmpty(path.parse(urlPath).ext)) {\n            fileInfo.folder = splittedValue[1];\n            fileInfo.file = splittedValue.splice(2).join(\"/\");\n            return fileInfo;\n        }\n        fileInfo.folder = splittedValue[1];\n        return fileInfo;\n\n    }\n\n    private getFileStats_(filePath) {\n        return promise<Fs.Stats>((res, rej) => {\n            // eslint-disable-next-line\n            Fs.lstat(filePath, (err, status) => {\n                if (err) {\n                    if (err.code === 'ENOENT') {\n                        res(null);\n                    }\n                    else {\n                        rej(err);\n                    }\n                }\n                else {\n                    res(status);\n                }\n            });\n        });\n    }\n\n    protected handleFileRequestFromAbsolutePath(absolutePath: string, fileType: string) {\n        return this.getFileStats_(absolutePath).then(fileInfo => {\n            if (fileInfo != null) {\n                if (fileInfo.isDirectory() === true) {\n                    return this.handleFileRequestForFolderPath_(absolutePath);\n                }\n                else {\n                    return this.sendFile_(absolutePath, fileType, fileInfo);\n\n                }\n            }\n            else {\n                return this.onNotFound();\n            }\n        });\n    }\n\n    private checkForFolderAllowAndReturnPath_(urlPath: string) {\n        const fileInfo = this.getFileInfoFromUrl_(urlPath);\n        const getAbsPath = function () {\n            const folder = FORT_GLOBAL.folders.find(qry => qry.alias === fileInfo.folder);\n            if (folder != null) {\n                return path.join(folder.path, fileInfo.file);\n            }\n            return null;\n        };\n        let absPath = getAbsPath();\n        if (absPath == null) {\n            fileInfo.folder = \"/\";\n            fileInfo.file = urlPath;\n            absPath = getAbsPath();\n        }\n        return absPath;\n    }\n\n    protected handleFileRequest(urlPath: string) {\n        const extension = path.parse(urlPath).ext;\n        const absFilePath = this.checkForFolderAllowAndReturnPath_(urlPath);\n        if (absFilePath != null) {\n            return this.handleFileRequestFromAbsolutePath(absFilePath, extension);\n        }\n        else {\n            return this.onNotFound();\n        }\n    }\n\n    /**\n     * process folders handling asuuming path is folder.\n     * Please check whether the file is folder before calling this function\n     *\n     * @private\n     * @param {string} filePath\n     * @param {Fs.Stats} fileInfo\n     * @returns\n     * @memberof FileHandler\n     */\n    private handleFileRequestForFolderPath_(absolutePath: string) {\n        absolutePath = path.join(absolutePath, \"index.html\");\n        return this.getFileStats_(absolutePath).then(fileInfo => {\n            return fileInfo != null ?\n                this.sendFile_(absolutePath, MIME_TYPE.Html, fileInfo) :\n                this.onNotFound();\n        });\n    }\n\n    protected isClientHasFreshFile(lastModified: string, etagValue: string) {\n        return fresh(this.request.headers, {\n            'etag': etagValue,\n            'last-modified': lastModified\n        });\n    }\n\n    protected sendFileAsResponse(filePath: string, mimeType: MIME_TYPE) {\n        this.response.writeHead(HTTP_STATUS_CODE.Ok, {\n            [CONTENT_TYPE]: mimeType\n        });\n        const readStream = Fs.createReadStream(filePath);\n        // Handle non-existent file\n        readStream.on('error', this.onErrorOccured.bind(this));\n        readStream.on('open', () => {\n            readStream.pipe(this.response);\n        });\n    }\n\n    sendFile_(filePath: string, fileType: string, fileInfo: Fs.Stats) {\n        const lastModified = fileInfo.mtime.toUTCString();\n        const eTagValue = etag(fileInfo, {\n            weak: FORT_GLOBAL.eTag.type === ETAG_TYPE.Weak\n        });\n        const response = this.response;\n        if (this.isClientHasFreshFile(lastModified, eTagValue)) { // client has fresh file\n            response.statusCode = HTTP_STATUS_CODE.NotModified;\n            response.end();\n        }\n        else {\n            response.setHeader('Etag', eTagValue);\n            response.setHeader('Last-Modified', lastModified);\n            this.sendFileAsResponse(filePath, getMimeTypeFromFileType(fileType));\n        }\n    }\n}","\nimport { MIME_TYPE, HTTP_STATUS_CODE, HTTP_RESULT_TYPE } from \"../enums\";\nimport { FileHandler } from \"./file_handler\";\nimport * as path from 'path';\nimport { textResult } from \"../helpers\";\nimport { promiseResolve } from \"../utils\";\nimport { IHttpResult, IFileResultInfo } from \"../interfaces\";\n\nexport class ControllerResultHandler extends FileHandler {\n\n    private handleRedirectResult_() {\n        this.response.writeHead(this.controllerResult.statusCode || HTTP_STATUS_CODE.Ok,\n            { 'Location': (this.controllerResult as IHttpResult).responseData });\n        this.response.end();\n        return promiseResolve(null);\n    }\n\n    private handleFileResult_() {\n        const result = this.controllerResult as IHttpResult;\n        const fileResult = result.responseData as IFileResultInfo;\n        const parsedPath = path.parse(fileResult.filePath);\n        if (fileResult.shouldDownload === true) {\n            const fileName = fileResult.alias == null ? parsedPath.name : fileResult.alias;\n            this.response.setHeader(\n                \"content-disposition\",\n                `attachment;filename=${fileName}${parsedPath.ext}`\n            );\n        }\n        return this.handleFileRequestFromAbsolutePath(fileResult.filePath, parsedPath.ext);\n    }\n\n    onTerminationFromWall(result: IHttpResult) {\n        this.controllerResult = result;\n        return this.handleFinalResult_();\n    }\n\n    private handleFinalResult_() {\n        const result: IHttpResult = this.controllerResult;\n        this.setCookie();\n\n        switch (result.type) {\n            case HTTP_RESULT_TYPE.Default:\n                {\n                    const contentType = result.contentType || MIME_TYPE.Text;\n                    const negotiateMimeType = this.getContentTypeFromNegotiation(contentType) as MIME_TYPE;\n                    if (negotiateMimeType != null) {\n                        this.endResponse_(negotiateMimeType);\n                    }\n                    else {\n                        return this.onNotAcceptableRequest();\n                    }\n                }\n                break;\n            case HTTP_RESULT_TYPE.Redirect:\n                return this.handleRedirectResult_();\n            case HTTP_RESULT_TYPE.File:\n                return this.handleFileResult_();\n            case HTTP_RESULT_TYPE.FormattedResult:\n                return this.handleFormatResult_();\n        }\n    }\n\n    onResultFromComponent(result: IHttpResult) {\n        this.controllerResult = result || textResult(\"\");\n        // return () => {\n        return this.handleFinalResult_;\n        // }\n    }\n}","import * as http from \"http\";\nimport * as url from 'url';\nimport { Controller, Wall } from \"../abstracts\";\nimport { FORT_GLOBAL } from \"../constants/fort_global\";\nimport { parseAndMatchRoute, promise, reverseLoop } from \"../helpers\";\nimport { TGuard } from \"../types\";\nimport { HTTP_METHOD } from \"../enums\";\nimport { InjectorHandler } from \"./injector_handler\";\nimport { IHttpResult, IRouteMatch } from \"../interfaces\";\nimport { ControllerResultHandler } from \"./controller_result_handler\";\n\n\nexport class RequestHandler extends ControllerResultHandler {\n\n    private routeMatchInfo_: IRouteMatch;\n    private wallInstances: Wall[] = [];\n\n\n    private registerEvents_() {\n        this.request.on('error', (err) => {\n            this.onBadRequest(err).catch(ex => {\n                this.onErrorOccured(ex);\n            });\n        });\n        this.response.on('error', this.onErrorOccured.bind(this));\n    }\n\n    private executeWallIncoming_(): Promise<IHttpResult> {\n        const wallLength = FORT_GLOBAL.walls.length;\n        if (wallLength === 0) return;\n        return promise((res, rej) => {\n            let index = 0;\n            const executeWallIncomingByIndex = () => {\n                if (wallLength > index) {\n                    const wall = FORT_GLOBAL.walls[index++];\n                    const constructorArgsValues = InjectorHandler.getConstructorValues(wall.name);\n                    const wallObj = new wall(...constructorArgsValues);\n                    wallObj['componentProp_'] = this.componentProps;\n                    this.wallInstances.push(wallObj);\n\n                    const methodArgsValues = InjectorHandler.getMethodValues(wall.name, 'onIncoming', wallObj);\n                    wallObj.onIncoming(...methodArgsValues).then(result => {\n                        result == null ? executeWallIncomingByIndex() : res(result);\n                    }).catch(rej);\n                }\n                else {\n                    res(null);\n                }\n            };\n            executeWallIncomingByIndex();\n        });\n    }\n\n    async runController_() {\n        const result = await this.setControllerProps_();\n        return this.onResultFromComponent(result);\n    }\n\n    private executeShieldsProtection_(): Promise<() => void> {\n        const shields = this.routeMatchInfo_.shields;\n        const shieldLength = shields.length;\n        if (shieldLength === 0) return;\n        return promise((res, rej) => {\n            let index = 0;\n            const executeShieldByIndex = () => {\n                if (shieldLength > index) {\n                    const shield = shields[index++];\n                    const constructorArgsValues = InjectorHandler.getConstructorValues(shield.name);\n                    const shieldObj = new shield(...constructorArgsValues);\n                    shieldObj['componentProp_'] = this.componentProps;\n\n                    const methodArgsValues = InjectorHandler.getMethodValues(shield.name, 'protect', shieldObj);\n\n                    return shieldObj.protect(...methodArgsValues).then(result => {\n                        result == null ? executeShieldByIndex() : res(this.onResultFromComponent(result as IHttpResult));\n                    }).catch(rej);\n                }\n                else {\n                    res(null);\n                }\n            };\n            executeShieldByIndex();\n        });\n    }\n\n    private executeGuardsCheck_(guards: Array<TGuard>): Promise<() => void> {\n        const guardLength = guards.length;\n        if (guardLength === 0) return;\n        return promise((res, rej) => {\n            let index = 0;\n            const executeGuardByIndex = () => {\n                if (guardLength > index) {\n                    const guard = guards[index++];\n                    const constructorArgsValues = InjectorHandler.getConstructorValues(guard.name);\n                    const guardObj = new guard(...constructorArgsValues);\n                    guardObj['componentProp_'] = this.componentProps;\n\n                    const methodArgsValues = InjectorHandler.getMethodValues(guard.name, 'check', guardObj);\n                    guardObj.check(...methodArgsValues).then(result => {\n                        result == null ? executeGuardByIndex() : res(this.onResultFromComponent(result as IHttpResult));\n                    }).catch(rej);\n                }\n                else {\n                    res(null);\n                }\n            };\n            executeGuardByIndex();\n        });\n    }\n\n    private setPreHeader_() {\n        const response = this.response;\n        response.setHeader('X-Powered-By', FORT_GLOBAL.appName);\n        response.setHeader('Vary', 'Accept-Encoding');\n        response.sendDate = true;\n    }\n\n    private async onRouteMatched_() {\n        const routeMatchInfo = this.routeMatchInfo_;\n        const workerInfo = routeMatchInfo.workerInfo;\n        this.componentProps.param = routeMatchInfo.params;\n        this.componentProps.controllerName = routeMatchInfo.controllerName;\n\n        if (workerInfo == null) {\n            return () => {\n                return this.request.method === HTTP_METHOD.Options ?\n                    this.onRequestOptions(routeMatchInfo.allowedHttpMethod) :\n                    this.onMethodNotAllowed(routeMatchInfo.allowedHttpMethod);\n            }\n        }\n        else {\n            this.componentProps.workerName = workerInfo.workerName;\n            const shieldResult = await this.executeShieldsProtection_();\n            if (shieldResult) return shieldResult;\n\n            const guardResult = await this.executeGuardsCheck_(\n                workerInfo.guards\n            );\n            if (guardResult) return guardResult;\n\n            return this.runController_();\n        }\n    }\n\n    private runWallOutgoing_() {\n        // check if only Cookie wall has been injected\n        if (this.wallInstances.length === 0) {\n            return;\n        }\n        const outgoingResults: Array<Promise<void>> = [];\n        reverseLoop(this.wallInstances, (wallInstance: Wall) => {\n            const methodArgsValues = InjectorHandler.getMethodValues(wallInstance.constructor.name, 'onOutgoing', wallInstance);\n            methodArgsValues.shift();\n            outgoingResults.push(wallInstance.onOutgoing(this.controllerResult, ...methodArgsValues) as any);\n        });\n        return Promise.all(outgoingResults);\n    }\n\n    private async execute_() {\n        const request = this.componentProps.request;\n        const urlDetail = url.parse(request.url, true);\n        this.componentProps.query = urlDetail.query;\n        try {\n            const wallResult = await this.executeWallIncoming_();\n            if (wallResult) {\n                await this.onTerminationFromWall(wallResult);\n                return;\n            }\n            const pathUrl = urlDetail.pathname;\n\n            this.routeMatchInfo_ = parseAndMatchRoute(pathUrl, request.method as HTTP_METHOD);\n            const finalCallback = await (\n                this.routeMatchInfo_ == null ? () => {\n                    return this.handleFileRequest(pathUrl);\n                } :\n                    this.onRouteMatched_()\n            );\n            await this.runWallOutgoing_();\n            // using call to pass context, as methods are being returned mostly\n            await finalCallback.call(this);\n        }\n        catch (ex) {\n            this.onErrorOccured(ex);\n        }\n    }\n\n\n\n    handle(request: http.IncomingMessage, response: http.ServerResponse) {\n        this.componentProps = {\n            request,\n            response,\n            data: {},\n            global: FORT_GLOBAL\n        } as any;\n        this.registerEvents_();\n        this.setPreHeader_();\n        this.execute_();\n    }\n\n    setControllerProps_() {\n        const controller = this.routeMatchInfo_.controller;\n        const controllerName = controller.name;\n        const constructorValues = InjectorHandler.getConstructorValues(controllerName);\n        const controllerObj: Controller = new controller(...constructorValues);\n\n        controllerObj['componentProp_'] = this.componentProps;\n        const workerName = this.routeMatchInfo_.workerInfo.workerName;\n        const methodArgsValues = InjectorHandler.getMethodValues(controllerName, workerName, controllerObj);\n        return controllerObj[workerName](...methodArgsValues);\n    }\n}","export * from \"./route_handler\";\nexport * from \"./request_handler\";\nexport * from \"./file_handler\";\nexport * from \"./request_handler_helper\";\nexport * from \"./controller_result_handler\";\nexport * from './injector_handler';","import { ErrorHandler, Logger } from \"../models\";\nimport { ViewEngine, ComponentOption } from \"../abstracts\";\nimport { TErrorHandler, TGuard, TSessionStore, TShield, TWall, TXmlParser } from \"../types\";\nimport { MustacheViewEngine, DtoValidator } from \"../extra\";\nimport { APP_NAME, CURRENT_PATH } from \"./index\";\nimport { ETAG_TYPE } from \"../enums\";\nimport { IDtoValidator, IEtagOption, IFolderMap } from \"../interfaces\";\nimport { CookieEvaluatorWall, MemorySessionStore, BlankXmlParser, PostDataEvaluatorGuard } from \"../providers\";\nimport { RouteHandler } from \"../handlers\";\n\nconst isDevelopment = process.env.NODE_ENV === 'development';\nconst isProduction = process.env.NODE_ENV === \"production\";\n\nexport class FortGlobal {\n    port = 4000;\n    viewPath;\n    shouldParseCookie = true;\n    shouldParseBody = true;\n    sessionStore: TSessionStore;\n    sessionTimeOut = 60;\n    viewEngine: ViewEngine;\n    walls: TWall[] = [];\n    errorHandler: TErrorHandler;\n    keepAliveTimeout = 30000;\n    private shields: TShield[] = [];\n    private guards: TGuard[] = [];\n\n    addGuards(guards: TGuard[]) {\n        this.guards = guards;\n    }\n\n    addShields(shields: TShield[]) {\n        this.shields = shields;\n    }\n\n    appName: string;\n\n    eTag: IEtagOption;\n\n    folders: IFolderMap[] = [];\n    appSessionIdentifier: string;\n    xmlParser: TXmlParser;\n\n    logger: Logger;\n\n    validator: IDtoValidator;\n\n    get isDevelopment() {\n        return isDevelopment;\n    }\n\n    get isProduction() {\n        return isProduction;\n    }\n\n    componentOption = new ComponentOption();\n\n    setDefault() {\n\n        this.viewPath = this.viewPath || CURRENT_PATH;\n        this.logger = this.logger || new Logger();\n\n        this.sessionStore = this.sessionStore || MemorySessionStore;\n        this.xmlParser = this.xmlParser || BlankXmlParser;\n        this.viewEngine = this.viewEngine || new MustacheViewEngine();\n        this.appName = this.appName || APP_NAME;\n\n        if (this.eTag == null) {\n            this.eTag = {\n                type: ETAG_TYPE.Weak\n            } as IEtagOption;\n        }\n        this.errorHandler = this.errorHandler || ErrorHandler;\n        this.validator = this.validator || new DtoValidator();\n        this.appSessionIdentifier = `${this.appName}_session_id`;\n\n        if (this.shouldParseCookie === true) {\n            this.walls.unshift(\n                CookieEvaluatorWall as any\n            );\n        }\n\n        if (this.shouldParseBody === true) {\n            this.guards.unshift(\n                PostDataEvaluatorGuard as any\n            );\n        }\n\n        // add global shields\n        RouteHandler.routerCollection.forEach((route) => {\n            route.shields = this.shields.concat(route.shields);\n            route.workers.forEach((worker) => {\n                worker.guards = this.guards.concat(worker.guards);\n            })\n        });\n\n    }\n\n}\n\nexport const FORT_GLOBAL = new FortGlobal();","import { IError } from \"../interfaces/error\";\nimport { ERROR_TYPE } from \"../enums/error_type\";\n\nexport class LogHelper implements IError {\n    type: ERROR_TYPE;\n    message: string;\n    private info_: any;\n\n    constructor(type: ERROR_TYPE, info?: any) {\n        this.type = type;\n        this.info_ = info;\n        this.message = this.getMsg_();\n    }\n\n    throw() {\n        const errMsg = this.get();\n        throw JSON.stringify(errMsg);\n    }\n\n    static log(msg) {\n        console.log(msg);\n    }\n\n    logError() {\n        console.error(this.get());\n    }\n\n    logWarning() {\n        console.warn(this.get());\n    }\n\n    get() {\n        return {\n            message: this.message,\n            type: this.type\n        } as IError;\n    }\n\n    private getMsg_() {\n        let errMsg: string;\n        switch (this.type) {\n            case ERROR_TYPE.InvalidControllerName:\n                errMsg = `Invalid controller name - '${this.info_}'. Controller name must contain 'controller'.`;\n                break;\n            case ERROR_TYPE.InvalidContentType:\n                errMsg = `Content type - '${this.info_}' is not valid. Please create an issue if you think this is valid type.`;\n                break;\n            case ERROR_TYPE.PortInUse:\n                errMsg = `Port ${this.info_} is being used by another process.`;\n                break;\n            case ERROR_TYPE.UndefinedViewEngine:\n                errMsg = `View engine is not initiated.Initiate the view engine where fort is created.`;\n                break;\n            default:\n                errMsg = this.message;\n                break;\n        }\n        return errMsg;\n    }\n}","import { FORT_GLOBAL } from \"../constants/fort_global\";\nimport { LogHelper } from \"./log_helper\";\nimport { ERROR_TYPE } from \"../enums/error_type\";\n\nexport let renderView: (viewName: string, model?: any) => Promise<string>;\n\nif (FORT_GLOBAL.isProduction === true) {\n    renderView = (viewName: string, model?: any) => {\n        return FORT_GLOBAL.viewEngine.render({\n            view: viewName,\n            model\n        });\n    };\n}\nelse {\n    renderView = (viewName: string, model?: any) => {\n        if (FORT_GLOBAL.viewEngine == null) {\n            new LogHelper(ERROR_TYPE.UndefinedViewEngine).throw();\n        }\n        return FORT_GLOBAL.viewEngine.render({\n            view: viewName,\n            model\n        });\n    };\n}\n","\nimport { HTTP_RESULT_TYPE } from \"../enums\";\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\nimport { IHttpResult } from \"../interfaces\";\n\nexport const downloadResult = (filePath: string, downloadFileName?: string) => {\n    return {\n        statusCode: HTTP_STATUS_CODE.Ok,\n        responseData: {\n            filePath: filePath,\n            shouldDownload: true,\n            alias: downloadFileName\n        },\n        type: HTTP_RESULT_TYPE.File\n    } as IHttpResult;\n};","\nimport { HTTP_RESULT_TYPE, HTTP_STATUS_CODE } from \"../enums\";\nimport { IHttpResult, IFileResultInfo } from \"../interfaces\";\n\nexport const fileResult = (filePath: string) => {\n    return {\n        statusCode: HTTP_STATUS_CODE.Ok,\n        responseData: {\n            filePath: filePath\n        } as IFileResultInfo,\n        type: HTTP_RESULT_TYPE.File\n    } as IHttpResult;\n};","import { HTTP_RESULT_TYPE, MIME_TYPE } from \"../enums\";\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\nimport { IHttpResult } from \"../interfaces\";\n\nexport const redirectResult = (url: string) => {\n    return {\n        contentType: MIME_TYPE.Text,\n        responseData: url,\n        statusCode: HTTP_STATUS_CODE.Redirect,\n        type: HTTP_RESULT_TYPE.Redirect\n    } as IHttpResult;\n};","import { renderView } from \"./render_view\";\nimport { IHttpResult } from \"../interfaces\";\nimport { MIME_TYPE, HTTP_STATUS_CODE, HTTP_RESULT_TYPE } from \"../enums\";\n\n\nexport const viewResult = (viewName: string, model?: any) => {\n    return renderView(viewName, model).then(viewData => {\n        return {\n            contentType: MIME_TYPE.Html,\n            responseData: viewData,\n            statusCode: HTTP_STATUS_CODE.Ok,\n            type: HTTP_RESULT_TYPE.Default\n        } as IHttpResult;\n    });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs-extra\");","import { readFile } from \"fs-extra\";\nimport * as path from \"path\";\nimport { FORT_GLOBAL } from \"../constants/fort_global\";\nimport { ViewReadOption } from \"../interfaces\";\nimport { promiseResolve } from \"../utils\";\n\nconst viewCache = {\n\n};\n\nexport let getViewFromFile: (option: ViewReadOption) => Promise<string | any>;\n\nconst readView = (option: ViewReadOption) => {\n    const pathOfView = path.join(FORT_GLOBAL.viewPath, option.fileLocation);\n    // eslint-disable-next-line\n    return readFile(pathOfView, {\n        encoding: 'utf8'\n    }).then(result => {\n        if (option.mapView != null) {\n            return option.mapView(result);\n        }\n        return result;\n    });\n};\nif (FORT_GLOBAL.isProduction === true) {\n    getViewFromFile = function (option: ViewReadOption): Promise<string | any> {\n        if (viewCache[option.fileLocation] == null) {\n            return readView(option).then(result => {\n                viewCache[option.fileLocation] = result;\n                return result;\n            })\n        }\n        return promiseResolve(viewCache[option.fileLocation]);\n    };\n}\nelse {\n    getViewFromFile = function (option: ViewReadOption): Promise<string | any> {\n        return readView(option);\n    };\n}","export const promise = <T>(callBack: (resolve, reject) => void) => {\n    return new Promise<T>(callBack);\n};","import { MIME_TYPE } from \"../enums\";\n\nexport const getMimeTypeFromExtension = (ext: string): MIME_TYPE => {\n    switch (ext) {\n        case \".htm\":\n        case \".html\":\n            return MIME_TYPE.Html;\n        case \".css\":\n            return MIME_TYPE.Css;\n        case \".js\":\n            return MIME_TYPE.Js;\n        case \".png\":\n            return MIME_TYPE.Png;\n        case \".woff\":\n            return MIME_TYPE.Woff;\n        case \".woff2\":\n            return MIME_TYPE.Woff2;\n        case \".json\":\n            return MIME_TYPE.Json;\n        case \".txt\":\n            return MIME_TYPE.Text;\n        case \".jpg\":\n        case \".jpeg\":\n            return MIME_TYPE.Jpeg;\n        case \".rtf\":\n            return MIME_TYPE.Rtf;\n        case \".ttf\":\n            return MIME_TYPE.Ttf;\n        case \".eot\":\n            return MIME_TYPE.Eot;\n        case '.otf':\n            return MIME_TYPE.Otf;\n        case \".swf\":\n            return MIME_TYPE.Swf;\n        case \".avi\":\n            return MIME_TYPE.Avi;\n        case \".svg\":\n            return MIME_TYPE.Svg;\n        case \".pdf\":\n            return MIME_TYPE.Pdf;\n        case \".xml\":\n            return MIME_TYPE.Xml;\n        case \".csv\":\n            return MIME_TYPE.Csv;\n        case \".xls\":\n            return MIME_TYPE.Xls;\n        case \".xlsx\":\n            return MIME_TYPE.Xlsx;\n        case \".bmp\":\n            return MIME_TYPE.Bmp;\n        case \".gif\":\n            return MIME_TYPE.Gif;\n        default:\n            return \"application/octet-stream\" as MIME_TYPE;\n    }\n};","export const removeLastSlash = (url: string) => {\n    const urlLength = url.length;\n    // removing / from url;\n    if (url[urlLength - 1] === \"/\") {\n        return url.substring(0, urlLength - 1);\n    }\n    return url;\n};","import { RouteHandler } from \"../handlers/route_handler\";\nimport { HTTP_METHOD } from \"../enums\";\nimport { removeLastSlash } from \"./remove_last_slash\";\nimport { RouteInfo } from \"../models\";\nimport { compareString } from \"../utils\";\nimport { IRouteMatch } from \"../interfaces\";\n\nconst regex1 = /{(.*)}(?!.)/;\n// for extension - e.g - {{file}}.js\nconst regex2 = /{(.*)}\\.(\\w+)(?!.)/;\n\nconst checkRouteInWorker = (route: RouteInfo, httpMethod: HTTP_METHOD, urlParts: string[]) => {\n    const matchedRoute: IRouteMatch = {\n        allowedHttpMethod: [],\n        controller: route.controller,\n        controllerName: route.controllerName\n    } as IRouteMatch;\n\n    const urlPartLength = urlParts.length;\n    for (const worker of route.workers.values()) {\n        const patternSplit = worker.patternSplitted;\n        if (urlPartLength !== patternSplit.length) continue;\n        let isMatched = true;\n        const params = {};\n        urlParts.every((urlPart, i) => {\n            const patternSplitAtIndex = patternSplit[i];\n            // if not equal then check for regex match\n            if (compareString(urlPart, patternSplitAtIndex) === false) {\n                const regMatch1 = patternSplitAtIndex.match(regex1);\n                if (regMatch1 != null) {\n                    params[regMatch1[1]] = urlPart;\n                    return true;\n                }\n                const regMatch2 = patternSplitAtIndex.match(regex2);\n                if (regMatch2 != null) {\n                    const splitByDot = urlPart.split(\".\");\n                    if (splitByDot[1] === regMatch2[2]) {\n                        params[regMatch2[1]] = splitByDot[0];\n                        return true;\n                    }\n                }\n                isMatched = false;\n            }\n            // means its direct match\n            return isMatched;\n        });\n\n        if (isMatched === true) {\n            if (!worker.methodsAllowed) {\n                throw `Invalid route registration in Controller : ${route.controllerName} and method : ${worker.workerName}.Route exist but method has not been decorated with worker.`;\n            }\n\n            if (worker.methodsAllowed.indexOf(httpMethod) >= 0) {\n                matchedRoute.workerInfo = worker;\n                matchedRoute.params = params;\n                matchedRoute.shields = route.shields;\n                return matchedRoute;\n            }\n            else {\n                matchedRoute.allowedHttpMethod = [...matchedRoute.allowedHttpMethod, ...worker.methodsAllowed];\n            }\n        }\n    }\n    if (matchedRoute.allowedHttpMethod.length === 0) {\n        return null;\n    }\n    matchedRoute.params = {};\n    return matchedRoute;\n\n};\n\nexport function parseAndMatchRoute(url: string, httpMethod: HTTP_METHOD) {\n    url = removeLastSlash(url);\n    const urlAndMethod = url + httpMethod;\n    const cache = RouteHandler.getRouteFromCache(urlAndMethod);\n    if (cache) {\n        return cache;\n    }\n    const urlParts = url.split(\"/\");\n    const route = RouteHandler.findControllerFromPath(urlParts);\n    const result = route == null ? checkRouteInWorker(RouteHandler.defaultRoute, httpMethod, urlParts) :\n        checkRouteInWorker(route, httpMethod, urlParts);\n\n    // do not cache route which have params\n    if (result && Object.keys(result.params).length === 0) {\n        RouteHandler.addRouteToCache(urlAndMethod, result);\n    }\n    return result;\n}","import { isNullOrEmpty } from \"../utils\";\n\n \n\n\nexport const parseCookie = (cookie: string): { [key: string]: string } => {\n    const value = {};\n    if (!isNullOrEmpty(cookie)) {\n        cookie.split(';').forEach((val) => {\n            const parts = val.split('=');\n            value[parts.shift().trim()] = decodeURI(parts.join('='));\n        });\n    }\n    return value;\n};","import { IException } from \"../interfaces\";\n\nexport class JsonHelper {\n    static parse(value: string) {\n        try {\n            return JSON.parse(value);\n        }\n        catch (ex) {\n            // tslint:disable-next-line\n            throw {\n                message: \"Post data is invalid\"\n            } as IException;\n        }\n    }\n\n    static stringify(value) {\n        return JSON.stringify(value);\n    }\n}","export const removeFirstSlash = function (value: string) {\n    // remove / from string at 0th index\n    if (value[0] === \"/\") {\n        return value.substring(1);\n    }\n    return value;\n};","export const reverseLoop = function (values: any[], cb: (value, index: number) => void) {\n    for (let length = values.length, i = length - 1; i >= 0; i--) {\n        cb(values[i], i);\n    }\n};","import { DATA_TYPE } from \"../enums/data_type\";\n\nexport const getDataType = (value) => {\n    const type = typeof value;\n    switch (type) {\n        case 'object':\n            if (Array.isArray(value)) {\n                return DATA_TYPE.Array;\n            }\n        default:\n            return type;\n    }\n};","export const getClassName = (target): string => {\n    return target.name || (target.constructor && target.constructor.name);\n};","import { getDataType } from \"./get_data_type\";\nimport { DATA_TYPE } from \"../enums/data_type\";\n\nexport const removeMethodAndNullFromObject = (value: object) => {\n\n    const outputValue = {};\n    for (const prop in value) {\n        const type = getDataType(value[prop]);\n        if (!(value[prop] == null || type === DATA_TYPE.Function)) {\n            outputValue[prop] = value[prop];\n        }\n    }\n\n    return outputValue;\n};","import { MIME_TYPE } from \"../enums\";\nimport { ResultMapper } from \"../abstracts\";\n\nexport let getResultBasedOnMiMe = (type: MIME_TYPE, result, setMimeType: (type) => void) => {\n    switch (type) {\n        case MIME_TYPE.Json:\n        case MIME_TYPE.Text:\n        case MIME_TYPE.Html:\n        case MIME_TYPE.Xml:\n            if (typeof result === 'object' === true) {\n                setMimeType(MIME_TYPE.Json);\n                return JSON.stringify(result);\n            }\n    }\n    return result;\n};\n\nexport function setResultMapper(mapper: typeof ResultMapper) {\n    getResultBasedOnMiMe = (type, result, callBack) => {\n        return new (mapper as any)().map(type, result, callBack);\n    };\n}","import { MIME_TYPE } from \"../enums\";\nimport { getMimeTypeFromExtension } from \"./get_mime_type_from_extension\";\n\nexport function getMimeTypeFromFileType(fileType: string) {\n    return fileType[0] === '.' ? getMimeTypeFromExtension(fileType) :\n        fileType as MIME_TYPE;\n}","export const splitRoute = (value: string) => {\n    return value.split(\"/\");\n};\n\nexport const joinRoute = (value: string[]) => {\n    return value.join(\"/\");\n}","import { FORT_GLOBAL } from \"../constants\";\n\n\nexport const executeValidate = async (dtoClass, data) => {\n    const validator = FORT_GLOBAL.validator;\n    const dtoInstance = new dtoClass(data);\n    if (Object.keys(dtoInstance).length === 0) {\n        Object.assign(dtoInstance, data);\n    }\n\n    const validationResult = await validator.validate(\n        dtoInstance\n    );\n    if (validationResult) {\n        return {\n            error: validator.getErrorResult(validationResult)\n        }\n    }\n    return {\n        model: dtoInstance\n    }\n}","import { Guard } from \"../abstracts\";\nimport { RouteHandler } from \"../handlers\";\nimport { executeValidate } from \"./execute_validate\";\n\nexport class ValidateParamGuard extends Guard {\n    async check() {\n        const componentProp = this['componentProp_'];\n        const expectedValue = RouteHandler.getExpectedParam(componentProp.controllerName, this.workerName);\n        if (expectedValue == null) return;\n        const validationResult = await executeValidate(expectedValue, this.param);\n        if (validationResult.error) {\n            return validationResult.error;\n        }\n        componentProp.param = validationResult.model;\n    }\n}","import { Guard } from \"../abstracts\";\nimport { RouteHandler } from \"../handlers\";\nimport { executeValidate } from \"./execute_validate\";\n\nexport class ValidateBodyGuard extends Guard {\n    async check() {\n        const componentProp = this['componentProp_'];\n        const expectedBody = RouteHandler.getExpectedBody(componentProp.controllerName, this.workerName);\n        if (expectedBody == null) return;\n        const validationResult = await executeValidate(expectedBody, this.body);\n        if (validationResult.error) {\n            return validationResult.error;\n        }\n        componentProp.body = validationResult.model;\n    }\n}","import { Shield } from \"../abstracts\";\nimport { RouteHandler } from \"../handlers\";\nimport { executeValidate } from \"./execute_validate\";\n\nexport class ValidateQueryShield extends Shield {\n    async protect() {\n        const componentProp = this['componentProp_'];\n        const expectedQuery = RouteHandler.getExpectedQuery(componentProp.controllerName, this.workerName);\n        if (expectedQuery == null) return;\n        const validationResult = await executeValidate(expectedQuery, this.query);\n        if (validationResult.error) {\n            return validationResult.error;\n        }\n        componentProp.query = validationResult.model;\n    }\n}","\nimport { HTTP_RESULT_TYPE } from \"../enums\";\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\nimport { IHttpResult } from \"../interfaces\";\nimport { HttpFormatResult } from \"../types\";\n\nexport const multiTypeResult = (value: HttpFormatResult, statusCode?: HTTP_STATUS_CODE) => {\n    return {\n        responseData: value,\n        statusCode: statusCode || HTTP_STATUS_CODE.Ok,\n        type: HTTP_RESULT_TYPE.FormattedResult\n    } as IHttpResult;\n};","import { IHttpResponse } from \"../../interfaces\";\n\nexport class HttpResponseStub implements IHttpResponse {\n    private headers_;\n    constructor(headers) {\n        this.headers_ = headers;\n    }\n\n    getHeader(name: string) {\n        return this.headers_[name];\n    }\n\n    hasHeader(name: string) {\n        return this.headers_[name] != null;\n    }\n\n    setHeader(name: string, value: number | string | string[]) {\n        this.headers_[name] = value;\n    }\n\n    getHeaders() {\n        return this.headers_;\n    }\n\n    getHeaderNames(): string[] {\n        return Object.keys[this.headers_];\n    }\n\n    removeHeader(name: string) {\n        delete this.headers_[name];\n    }\n}","import { IHttpRequest } from \"../../interfaces\";\n\nexport class HttpRequestStub implements IHttpRequest {\n    headers;\n\n    constructor(headers) {\n        this.headers = headers;\n    }\n}","\nimport { CookieManager, FileManager } from \"../../models\";\nimport { FORT_GLOBAL } from \"../../constants/fort_global\";\nimport { IControllerTestData } from \"../../interfaces\";\nimport { HttpResponseStub } from \"./http_response_stub\";\nimport { HttpRequestStub } from \"./http_request_stub\";\nimport { Controller } from \"../../abstracts\";\nimport { SessionManager } from \"../../utils\";\n\n\n\nexport const initController = (controllerInstance: Controller, data?: IControllerTestData) => {\n    data = data || {};\n    const parsedCookies = data.cookieValue || {};\n    const headers = (data.request && data.request.headers) || {};\n    const cookie = new CookieManager(parsedCookies);\n    const session = new SessionManager(\n        cookie,\n        FORT_GLOBAL.sessionStore\n    );\n    controllerInstance['componentProp_'] = {\n        request: new HttpRequestStub(headers) as any,\n        response: new HttpResponseStub(headers) as any,\n        query: data.query || {},\n        body: data.body || {},\n        cookie: cookie,\n        session: session,\n        param: data.param || {},\n        data: data.data || {},\n        file: new FileManager(data.file || {}),\n        workerName: (data as any).workerName,\n        global: FORT_GLOBAL\n    };\n    return controllerInstance;\n};","\nimport { initController } from \"./init_controller\";\nimport { IControllerTestData } from \"../../interfaces\";\n\n// eslint-disable-next-line\nexport interface IGuardTestData extends IControllerTestData {\n\n}\n\nexport const initGuard = (guardInstance, data?: IGuardTestData) => {\n    return initController(guardInstance, data);\n};","\nimport { initController } from \"./init_controller\";\nimport { IControllerTestData } from \"../../interfaces\";\n\nexport interface IShieldTestData extends IControllerTestData {\n    workerName?: string;\n}\n\nexport const initShield = (shieldInstance, data?: IShieldTestData) => {\n    const value: IShieldTestData = initController(shieldInstance, data) as any;\n    return value;\n};","\nimport { initController } from \"./init_controller\";\nimport { IControllerTestData } from \"../../interfaces\";\n\n// eslint-disable-next-line\nexport interface IWallTestData extends IControllerTestData {\n\n}\n\nexport const initWall = (wallInstance, data?: IWallTestData) => {\n    return initController(wallInstance, data);\n};","export * from './init_controller';\nexport * from './init_guard';\nexport * from './init_shield';\nexport * from './init_wall';","export * from './json_result';\nexport * from './text_result';\nexport * from './html_result';\nexport * from './render_view';\nexport * from './download_result';\nexport * from './file_result';\nexport * from './redirect_result';\nexport * from './view_result';\nexport * from './get_view_from_file';\nexport * from \"./promise\";\nexport * from './log_helper';\nexport * from \"./get_mime_type_from_extension\";\nexport * from \"./parse_match_route\";\nexport * from \"./parse_cookie\";\nexport * from './json_helper';\nexport * from './remove_last_slash';\nexport * from './remove_first_slash';\nexport * from './reverse_loop';\nexport * from './get_data_type';\nexport * from './get_class_name';\nexport * from './remove_method_and_null_from_object';\nexport * from './get_result_based_on_mime';\nexport * from './get_mime_type_from_file_type';\nexport * from './split_route';\nexport * from './validate_param_guard';\nexport * from './validate_body_guard';\nexport * from './validate_query_shield';\nexport * from './multi_format_result';\nexport * from './test';","import { IException, IHttpResult } from \"../interfaces\";\nimport { htmlResult } from \"../helpers\";\nimport { HTTP_STATUS_CODE } from \"../enums\";\nimport { promiseResolve } from \"../utils\";\n\nexport class ErrorHandler {\n    onServerError(ex: IException): Promise<IHttpResult> {\n        let errMessage = `<h1>internal server error</h1>\n            <h3>message : ${ex.message}</h3>`;\n        if (ex.stack) {\n            errMessage += `<p><b>stacktrace:</b> ${ex.stack}</p>`;\n        }\n        if (ex.type) {\n            errMessage += `<p><b>type:</b> ${ex.type}</p>`;\n        }\n        return promiseResolve(\n            htmlResult(errMessage, HTTP_STATUS_CODE.InternalServerError)\n        );\n    }\n\n    onBadRequest(ex: IException): Promise<IHttpResult> {\n        let errMessage = `<h1>Bad Request</h1>`;\n        if (ex.message) {\n            errMessage += ` <h3>message : ${ex.message} </h3>`;\n        }\n        if (ex.stack) {\n            errMessage += `<p><b>stacktrace:</b> ${ex.stack}</p>`;\n        }\n        if (ex.type) {\n            errMessage += `<p><b>type:</b> ${ex.type}</p>`;\n        }\n        return promiseResolve(\n            htmlResult(errMessage, HTTP_STATUS_CODE.BadRequest)\n        );\n    }\n\n    onForbiddenRequest(): Promise<IHttpResult> {\n        return promiseResolve(\n            htmlResult(`<h1>Forbidden</h1>`, HTTP_STATUS_CODE.Forbidden)\n        );\n    }\n\n    onNotAcceptableRequest(): Promise<IHttpResult> {\n        return promiseResolve(\n            htmlResult(`<h1>Not Acceptable</h1>`, HTTP_STATUS_CODE.NotAcceptable)\n        );\n    }\n\n    onMethodNotAllowed(): Promise<IHttpResult> {\n        return promiseResolve(\n            htmlResult(`<h1>Method Not allowed.</h1>`, HTTP_STATUS_CODE.MethodNotAllowed)\n        );\n    }\n\n    onNotFound(url: string): Promise<IHttpResult> {\n        return promiseResolve(\n            htmlResult(`<h1>The requested resource ${url} was not found.</h1>`, HTTP_STATUS_CODE.NotFound)\n        );\n    }\n}","import { IHttpCookie } from \"../interfaces\";\n\nexport class HttpCookie implements IHttpCookie {\n    name: string;\n    value: string;\n    maxAge?: number;\n    expires?: Date;\n    domain?: string;\n    httpOnly?: boolean;\n    secure?: boolean;\n    path?: string;\n\n    constructor(name: string, value: string) {\n        this.name = name;\n        this.value = value;\n    }\n}","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"http\");","import { TSessionStore, TXmlParser, TErrorHandler, TWall, TShield, TGuard } from \"../types\";\nimport { ViewEngine, ResultMapper, Controller, ComponentOption } from \"../abstracts\";\nimport { RouteHandler, RequestHandler } from \"../handlers\";\nimport { FORT_GLOBAL } from \"../constants/fort_global\";\nimport * as http from \"http\";\nimport { ERROR_TYPE } from \"../enums\";\nimport { LogHelper, promise, removeLastSlash, removeFirstSlash, setResultMapper } from \"../helpers\";\nimport { isArray } from \"../utils\";\nimport { Logger } from \"./logger\";\nimport { IDtoValidator, IEtagOption, IFolderMap, IControllerRoute } from \"../interfaces\";\n\nexport class Fort {\n\n    static set logger(value) {\n        FORT_GLOBAL.logger = typeof value === 'function' ? new (this as any).value() :\n            value;\n    }\n\n    static get logger(): Logger {\n        return FORT_GLOBAL.logger;\n    }\n\n    static set walls(walls: TWall[]) {\n        FORT_GLOBAL.walls = walls;\n    }\n\n    static get walls() {\n        return FORT_GLOBAL.walls;\n    }\n\n    static set shields(shields: TShield[]) {\n        FORT_GLOBAL.addShields(shields);\n    }\n\n    static set guards(guards: TGuard[]) {\n        FORT_GLOBAL.addGuards(guards);\n    }\n\n    /**\n     * port at which app will listen, default - 4000\n     *\n     * @static\n     * @memberof Fort\n     */\n    static set port(value: number) {\n        FORT_GLOBAL.port = value;\n    }\n\n    static get port() {\n        return FORT_GLOBAL.port;\n    }\n\n    /**\n     * typeof ErrorHandler\n     *\n     * @static\n     * @memberof Fort\n     */\n    static set errorHandler(value: TErrorHandler) {\n        FORT_GLOBAL.errorHandler = value;\n    }\n\n    static set routes(value: IControllerRoute[]) {\n        if (value == null) {\n            value = [];\n        }\n        let isDefaultRouteExist = false;\n        // removing / from routes\n        value.forEach(route => {\n            // route.path = removeFirstSlash(route.path);\n            route.path = removeLastSlash(route.path);\n            RouteHandler.addToRouterCollection(route);\n            if (route.path === \"/*\") {\n                RouteHandler.defaultRouteControllerName = route.controller.name;\n                isDefaultRouteExist = true;\n            }\n        });\n        if (isDefaultRouteExist === false) {\n            class GenericController extends Controller {\n\n            }\n            RouteHandler.defaultRouteControllerName = GenericController.name;\n            RouteHandler.addToRouterCollection({\n                controller: GenericController,\n                path: \"/*\"\n            });\n        }\n    }\n\n    /**\n     * view engine use to render the view\n     *\n     * @static\n     * @memberof Fort\n     */\n    static set viewEngine(value: typeof ViewEngine) {\n        FORT_GLOBAL.viewEngine = new (value as any)();\n    }\n\n    /**\n     * sessionStore class, default - MemorySessionStore\n     *\n     * @static\n     * @memberof Fort\n     */\n    static set sessionStore(value: TSessionStore) {\n        FORT_GLOBAL.sessionStore = value;\n    }\n\n    static set resultMapper(value: typeof ResultMapper) {\n        setResultMapper(value);\n    }\n\n    /**\n     * XmlParser class - used to parse the xml \n     *\n     * @static\n     * @memberof Fort\n     */\n    static set xmlParser(xmlParser: TXmlParser) {\n        FORT_GLOBAL.xmlParser = xmlParser;\n    }\n\n    /**\n     * Whether to parse cookie or not, default - true\n     * If false, then session wont work.\n     *\n     * @static\n     * @memberof Fort\n     */\n    static set shouldParseCookie(value: boolean) {\n        FORT_GLOBAL.shouldParseCookie = value;\n    }\n\n    /**\n     * Whether to parse the http body data in post request, default - true\n     *\n     * @static\n     * @memberof Fort\n     */\n    static set shouldParseBody(value: boolean) {\n        FORT_GLOBAL.shouldParseBody = value;\n    }\n\n    /**\n     * session timeout in minute - default is 60 minute\n     *\n     * @static\n     * @memberof Fort\n     */\n    static set sessionTimeOut(value: number) {\n        FORT_GLOBAL.sessionTimeOut = value;\n    }\n\n    /**\n     * name of application - default is fort. Visible in header and cookie.\n     * Change name if you dont want any one to know the framework name.\n     *\n     * @static\n     * @memberof Fort\n     */\n    static set appName(value: string) {\n        FORT_GLOBAL.appName = value;\n    }\n\n    /**\n     * Views folder location. By default it is - views.\n     *\n     * @static\n     * @memberof Fort\n     */\n    static set viewPath(value: string) {\n        FORT_GLOBAL.viewPath = value;\n    }\n\n    static set componentOption(value: typeof ComponentOption) {\n        FORT_GLOBAL.componentOption = new value();\n    }\n\n    static get httpServer() {\n        return Fort.instance.httpServer;\n    }\n\n    static set httpServer(value: http.Server) {\n        Fort.instance.httpServer = value;\n    }\n\n    /**\n     * folders which should be visible to requests. By default nothing is allowed.\n     *\n     * @static\n     * @memberof Fort\n     */\n    static set folders(value: IFolderMap[]) {\n        value = value || [];\n        if (isArray(value) === false) {\n            throw new Error(`folders should be an array`);\n        }\n\n        // remove / from files routes\n        value.forEach(folder => {\n            const length = folder.alias.length;\n            if (length > 1) {\n                folder.alias = removeFirstSlash(folder.alias);\n                folder.alias = removeLastSlash(folder.alias);\n            }\n        });\n\n        FORT_GLOBAL.folders = value;\n    }\n\n    /**\n     * eTag Settings\n     *\n     * @static\n     * @memberof Fort\n     */\n    static set eTag(value: IEtagOption) {\n        FORT_GLOBAL.eTag = value;\n    }\n\n    /**\n     * keep alive timeout in millisecond for requests, default is 72000\n     *\n     * @static\n     * @memberof Fort\n     */\n    static set keepAliveTimeout(value: number) {\n        FORT_GLOBAL.keepAliveTimeout = value;\n    }\n\n    static instance = new Fort();\n\n    // eslint-disable-next-line\n    private constructor() {\n\n    }\n\n    private httpServer: http.Server;\n\n    static create(): Promise<void> {\n        FORT_GLOBAL.setDefault();\n\n        if (this.instance.httpServer != null) {\n            return;\n        }\n        return promise((res, rej) => {\n            this.instance.httpServer = http.createServer(Fort.onNewRequest).once(\"error\", (err) => {\n                if ((err as any).code === 'EADDRINUSE') {\n                    const error = new LogHelper(ERROR_TYPE.PortInUse, FORT_GLOBAL.port).get();\n                    rej(error);\n                }\n                else {\n                    rej(err);\n                }\n            }).once('listening', () => {\n                res();\n            }).listen(FORT_GLOBAL.port);\n\n            this.instance.httpServer.keepAliveTimeout = FORT_GLOBAL.keepAliveTimeout;\n        });\n    }\n\n    static onNewRequest(request, response) {\n        new RequestHandler().handle(request, response);\n    }\n\n    static destroy(): Promise<void> {\n        return promise((res) => {\n            this.instance.httpServer.close(res);\n        });\n    }\n\n    static set validator(validator: IDtoValidator) {\n        FORT_GLOBAL.validator = validator;\n    }\n\n}\n","import { RouteHandler } from \"../handlers\";\n\nexport class Router {\n    get routes() {\n        return RouteHandler.routerCollection;\n    }\n\n    get routesAsArray() {\n        return RouteHandler.routesAsArray;\n    }\n\n}","import { HttpCookie } from \"./http_cookie\";\nimport { IHttpCookie } from \"../interfaces\";\n\nexport class CookieManager {\n    private responseCookie_: string[] = [];\n    private cookieCollection_: { [key: string]: string };\n\n    constructor(parsedValue: { [key: string]: string }) {\n        this.cookieCollection_ = parsedValue;\n    }\n\n    /**\n     * return cookie by name\n     *\n     * @param {string} name\n     * @returns\n     * @memberof CookieManager\n     */\n    getCookie(name: string): HttpCookie {\n        return {\n            name: name,\n            value: this.cookieCollection_[name]\n        } as IHttpCookie;\n    }\n\n    /**\n     * add cookie\n     *\n     * @param {HttpCookie} cookie\n     * @memberof CookieManager\n     */\n    addCookie(cookie: HttpCookie) {\n        this.cookieCollection_[cookie.name] = cookie.value;\n        this.responseCookie_.push(this.getCookieStringFromCookie_(cookie));\n    }\n\n    /**\n     * remove cookie\n     *\n     * @param {HttpCookie} cookie\n     * @memberof CookieManager\n     */\n    removeCookie(cookie: HttpCookie) {\n        this.cookieCollection_[cookie.name] = null;\n        cookie.expires = new Date('Thu, 01 Jan 1970 00:00:00 GMT');\n        cookie.maxAge = -1;\n        this.responseCookie_.push(this.getCookieStringFromCookie_(cookie));\n    }\n\n    /**\n     * collection of http cookie\n     *\n     * @readonly\n     * @memberof CookieManager\n     */\n    get cookieCollection() {\n        return this.cookieCollection_;\n    }\n\n    /**\n     * determine whether value exist or not\n     *\n     * @param {string} name\n     * @returns\n     * @memberof CookieManager\n     */\n    isExist(name: string) {\n        return this.cookieCollection_[name] != null;\n    }\n\n    private getCookieStringFromCookie_(cookie: HttpCookie) {\n        const cookies = [];\n        cookies.push(`${cookie.name}=${cookie.value}`);\n        if (cookie.expires) {\n            cookies.push(`Expires=${cookie.expires.toUTCString()}`);\n        }\n        if (cookie.httpOnly === true) {\n            cookies.push(\"HttpOnly\");\n        }\n        if (cookie.maxAge != null) {\n            cookies.push(`Max-Age=${cookie.maxAge}`);\n        }\n        if (cookie.path) {\n            cookies.push(`Path=${cookie.path}`);\n        }\n        if (cookie.domain) {\n            cookies.push(`Domain=${cookie.domain}`);\n        }\n        return cookies.join('; ');\n    }\n}","import { HttpFile } from \"./http_file\";\nimport * as Fs from \"fs-extra\";\n\nexport class FileManager {\n\n    private files_: { [fieldName: string]: HttpFile };\n\n    constructor(value) {\n        this.files_ = value as any;\n    }\n\n    /**\n     * get total no of files\n     *\n     * @returns - number\n     * @memberof FileManager\n     */\n    get count() {\n        return Object.keys(this.files_).length;\n    }\n\n    get files() {\n\n        return Object.keys(this.files_).map(fileId => {\n            return this.files_[fileId];\n        });\n    }\n\n    /**\n     * check for existance of file\n     *\n     * @param {string} fieldName\n     * @returns\n     * @memberof FileManager\n     */\n    isExist(fieldName: string) {\n        return this.files_[fieldName] != null;\n    }\n\n    /**\n     * return the file\n     *\n     * @param {string} fieldName\n     * @returns\n     * @memberof FileManager\n     */\n    getFile(fieldName: string) {\n        return this.files_[fieldName];\n    }\n\n    /**\n     * saves file to supplied path\n     *\n     * @param {string} fieldName\n     * @param {string} pathToSave\n     * @returns\n     * @memberof FileManager\n     */\n    saveTo(fieldName: string, pathToSave: string) {\n        return Fs.copy(this.files_[fieldName].path, pathToSave);\n    }\n}","import { IncomingHttpHeaders } from \"http2\";\n\n \nexport class HttpFile {\n\n    /**\n     * same as name - the field name for this file\n     */\n    fieldName: string;\n\n    /**\n     * the filename that the user reports for the file\n     */\n    originalFilename: string;\n\n    /**\n     * the absolute path of the uploaded file on disk\n     */\n    path: string;\n\n    /**\n     * the HTTP headers that were sent along with this file\n     */\n    headers?: IncomingHttpHeaders;\n\n    /**\n     * size of the file in bytes\n     */\n    size?: number;\n\n}\n","export class Logger {\n    info?(...args) {\n        this.debug(args);\n    }\n    error?(...args) {\n        this.debug(args);\n    }\n    log?(...args) {\n        this.debug(args);\n    }\n    debug?(...args) {\n        console.log(...args);\n    }\n}","import { IRouteInfo } from \"../interfaces\";\nimport { TController, TShield } from \"../types\";\nimport { WorkerInfo } from \"./worker_info\";\n\nexport class RouteInfo implements IRouteInfo {\n    controller: TController;\n    controllerName: string;\n    // workerName => WorkerInfo\n    workers: Map<string, WorkerInfo>;\n\n    get workersAsArray() {\n        return Array.from(this.workers.keys()).map(workerName => {\n            return this.workers.get(workerName);\n        });\n    }\n\n    shields: Array<TShield>;\n    values: any[];\n\n    pathSplitted: string[];\n\n    constructor(value: IRouteInfo) {\n        this.controllerName = value.controllerName;\n        this.controller = value.controller;\n        this.path = value.path;\n        this.shields = value.shields;\n        this.values = value.values;\n        this.workers = value.workers as any;\n    }\n\n    set path(value) {\n        if (value) {\n            this.pathSplitted = value.split(\"/\");\n        }\n    }\n}","import { RouteHandler, InjectorHandler } from \"../handlers\";\nimport { IControllerTestData } from \"../interfaces\";\n\nclass ControllerListRef {\n    static getInstance(name: string, data?: IControllerTestData) {\n        const routeInfo = RouteHandler.getControllerFromName(name);\n        if (routeInfo) {\n            const controller = new routeInfo.controller(...InjectorHandler.getConstructorValues(name));\n            if (data) {\n                controller.initialize(data);\n            }\n            return controller;\n        }\n    }\n\n    static getMethod(className: string, methodName: string) {\n        const controller = ControllerListRef.getInstance(className);\n        if (controller) {\n            return controller[methodName];\n        }\n    }\n\n    static executeMethod(className: string, methodName: string) {\n        const controller = ControllerListRef.getInstance(className);\n        if (controller) {\n            return controller[methodName](...InjectorHandler.getMethodValues(className, methodName, null));\n        }\n    }\n}\n\nexport class Components {\n    static controller = ControllerListRef;\n}\n\n","import { HTTP_METHOD } from \"../enums\";\nimport { joinRoute, splitRoute } from \"../helpers\";\nimport { TGuard } from \"../types\";\nimport { IWorkerInfo } from \"../interfaces\";\n\nexport class WorkerInfo implements IWorkerInfo {\n    workerName: string;\n    methodsAllowed: HTTP_METHOD[];\n    guards: Array<TGuard>;\n    // pattern: string[];\n    values: any[];\n    expectedQuery?: any;\n    expectedBody?: any;\n    expectedParam?: any;\n    patternSplitted: string[];\n\n    constructor(value: IWorkerInfo) {\n        this.workerName = value.workerName;\n        this.methodsAllowed = value.methodsAllowed;\n        this.guards = value.guards;\n        this.values = value.values;\n        this.expectedQuery = value.expectedQuery;\n        this.expectedBody = value.expectedBody;\n        this.pattern = value.pattern;\n    }\n\n    set pattern(value: string) {\n        this.patternSplitted = splitRoute(value || \"\");\n    }\n\n    get pattern() {\n        return joinRoute(this.patternSplitted);\n    }\n}","export * from './error_handler';\nexport * from './http_cookie';\nexport * from './fort';\nexport * from './router';\nexport * from './cookie_manager';\nexport * from \"./file_manager\";\nexport * from \"./http_file\";\nexport * from \"./logger\";\nexport * from './route_info';\nexport * from \"./components\";\nexport * from \"./worker_info\";\n","\nexport function wrapMethodDecorator(args: any[], executor: (target, propertyName, ...args) => void) {\n\n    // this is executed without param\n    if (args.length > 2 && args[2].writable != null) {\n        const [target, propertyName] = args;\n        executor(target, propertyName);\n        return;\n    }\n    return (target, key: string) => {\n        executor(target, key, ...args);\n    };\n}","import { HTTP_METHOD } from \"../enums\";\nimport { RouteHandler } from \"../handlers\";\nimport { IWorkerInfo } from \"../interfaces\";\nimport { wrapMethodDecorator } from \"./wrap_method_decorator\";\n\nexport function worker(allowedMethods1?: HTTP_METHOD, allowedMethods2?: HTTP_METHOD, allowedMethods3?: HTTP_METHOD): MethodDecorator;\nexport function worker(target, key: string): void;\nexport function worker(...args) {\n    return wrapMethodDecorator(args, createWorker);\n}\n\nconst allHttpMethod = [\n    HTTP_METHOD.Delete,\n    HTTP_METHOD.Get,\n    HTTP_METHOD.Post,\n    HTTP_METHOD.Patch,\n    HTTP_METHOD.Put\n];\n\nfunction createWorker(target: any, methodName: string, ...allowedMethods: HTTP_METHOD[]) {\n    const className = (target.constructor.name as string);\n    const actionInfo: IWorkerInfo = {\n        workerName: methodName,\n        methodsAllowed: allowedMethods.length === 0 ? allHttpMethod : allowedMethods,\n        guards: [],\n        pattern: `/${methodName.toLowerCase()}`,\n        values: []\n    };\n    RouteHandler.addWorker(actionInfo, className);\n}","import { Shield } from \"../abstracts\";\nimport { RouteHandler } from \"../handlers\";\nimport { TShield } from \"../types\";\n\nexport const shields = (...shields: Array<typeof Shield>): ClassDecorator => {\n    return (target: any) => {\n        const className = target.name;\n        RouteHandler.addShields(shields as Array<TShield>, className);\n    };\n};","import { RouteHandler } from \"../handlers\";\nimport { TGuard } from \"../types\";\n\nexport const guards = (...value: Array<TGuard>): MethodDecorator => {\n    return ((target: any, methodName: string) => {\n        const className = (target.constructor.name as string);\n        RouteHandler.addGuards(value as Array<TGuard>, className, methodName);\n    });\n};","import { RouteHandler } from \"../handlers\";\nimport { removeLastSlash } from \"../helpers\";\n\nexport const route = (format: string): MethodDecorator => {\n    return ((target: any, methodName: string) => {\n        const className = (target.constructor.name as string);\n        // remove / from route\n        if (format != null) {\n            format = removeLastSlash(format);\n        }\n        RouteHandler.addPattern(format, className, methodName);\n    });\n};","import { HTTP_METHOD } from \"../enums\";\nimport { route } from \"./route\";\nimport { worker } from \"./worker\";\nimport { wrapMethodDecorator } from \"./wrap_method_decorator\";\n\n// tslint:disable-next-line\nexport function defaultWorker(target, key: string): void;\nexport function defaultWorker(...allowedMethods: HTTP_METHOD[]): MethodDecorator;\nexport function defaultWorker(...args) {\n    return wrapMethodDecorator(args, createWorker);\n}\n\nfunction createWorker(target: any, methodName: string, ...allowedMethods: HTTP_METHOD[]) {\n    const args = (allowedMethods.length === 0 ? [HTTP_METHOD.Get] : allowedMethods);\n    (worker as any)(...args)(\n        target, methodName, null as any\n    );\n    route(\"/\")(target, methodName, null as any);\n}\n","import { InjectorHandler } from \"../handlers\";\nimport { CONSTRUCTOR } from \"../constants\";\n\nexport const assign = (value): ParameterDecorator => {\n    return (target: any, methodName: string, paramIndex: number) => {\n        const className: string = target.name || target.constructor.name;\n        if (methodName == null) {\n            methodName = CONSTRUCTOR;\n        }\n        InjectorHandler.addWorkerValue(className, methodName, paramIndex, value);\n    };\n};","import { InjectorHandler } from \"../handlers\";\nimport { CONSTRUCTOR } from \"../constants\";\n\nexport const singleton = (value): ParameterDecorator => {\n    return (target: any, methodName: string, paramIndex: number) => {\n        const className: string = target.name || target.constructor.name;\n        if (methodName == null || methodName === 'constructor') {\n            methodName = CONSTRUCTOR;\n        }\n        InjectorHandler.addSingleton(className, methodName, paramIndex, value);\n    };\n};","import { RouteHandler } from \"../handlers\";\nimport { ValidateParamGuard, ValidateBodyGuard, ValidateQueryShield, getClassName } from \"../helpers\";\n\nexport const validate = {\n    body: function (value: any): MethodDecorator {\n        return (target: any, methodName: string) => {\n            const className: string = getClassName(target);\n            RouteHandler.addExpected(\"body\", className, methodName, value);\n            RouteHandler.addGuards([ValidateBodyGuard], className, methodName);\n        };\n    },\n    param: function (value: any): MethodDecorator {\n        return (target: any, methodName: string) => {\n            const className: string = getClassName(target);\n            RouteHandler.addExpected(\"param\", className, methodName, value);\n            RouteHandler.addGuards([ValidateParamGuard], className, methodName);\n        };\n    },\n    query: function (value: any): MethodDecorator {\n        return (target: any, methodName: string) => {\n            const className: string = getClassName(target);\n            RouteHandler.addExpected(\"query\", className, methodName, value);\n            RouteHandler.addShields([ValidateQueryShield], className);\n        }\n    }\n}","import { assign } from \"./assign\";\nimport { Controller } from \"../abstracts\";\n\nconst createBodyInjectParam = (type, prop) => {\n    return {\n        \"__fortReqType__\": type,\n        inject: (controller: Controller) => {\n            return controller[prop];\n        }\n    };\n}\n\nexport function asBody(target: any, propertyKey: string | symbol, parameterIndex: number) {\n    assign(createBodyInjectParam(\"body\", \"body\"))(target, propertyKey, parameterIndex);\n}\n\nexport function asQuery(target: any, methodName: string, paramIndex: number) {\n    assign(createBodyInjectParam(\"query\", \"query\"))(target, methodName, paramIndex);\n}\n\nexport function asParam(target: any, methodName: string, paramIndex: number) {\n    assign(createBodyInjectParam(\"param\", \"param\"))(target, methodName, paramIndex);\n}\n\n","import { HTTP_METHOD } from \"../enums\";\nimport { route } from \"./route\";\nimport { worker } from \"./worker\";\nimport { wrapMethodDecorator } from \"./wrap_method_decorator\";\n\n// tslint:disable-next-line\nfunction get(target, key: string): void;\nfunction get(route: string): MethodDecorator;\nfunction get(...args) {\n    return wrapMethodDecorator(args, createWorkerForGet);\n}\n\n// tslint:disable-next-line\nfunction post(target, key: string): void;\nfunction post(route: string): MethodDecorator;\nfunction post(...args) {\n    return wrapMethodDecorator(args, createWorkerForPost);\n}\n\n// tslint:disable-next-line\nfunction del(target, key: string): void;\nfunction del(route: string): MethodDecorator;\nfunction del(...args) {\n    return wrapMethodDecorator(args, createWorkerForDelete);\n}\n\n// tslint:disable-next-line\nfunction patch(target, key: string): void;\nfunction patch(route: string): MethodDecorator;\nfunction patch(...args) {\n    return wrapMethodDecorator(args, createWorkerForPatch);\n}\n\n// tslint:disable-next-line\nfunction put(target, key: string): void;\nfunction put(route: string): MethodDecorator;\nfunction put(...args) {\n    return wrapMethodDecorator(args, createWorkerForPut);\n}\n\nfunction registerWorkerAndCreate(target, methodName, httpMethod: HTTP_METHOD, routes: string[]) {\n    const routeArg = (routes.length === 0 ? null : routes[0]);\n    (worker as any)(httpMethod)(\n        target, methodName, null as any\n    );\n    route(routeArg)(target, methodName, null as any);\n}\n\nfunction createWorkerForGet(target: any, methodName: string, ...routes: string[]) {\n    registerWorkerAndCreate(target, methodName, HTTP_METHOD.Get, routes);\n}\n\nfunction createWorkerForPost(target: any, methodName: string, ...routes: string[]) {\n    registerWorkerAndCreate(target, methodName, HTTP_METHOD.Post, routes);\n}\n\nfunction createWorkerForPatch(target: any, methodName: string, ...routes: string[]) {\n    registerWorkerAndCreate(target, methodName, HTTP_METHOD.Patch, routes);\n}\n\nfunction createWorkerForPut(target: any, methodName: string, ...routes: string[]) {\n    registerWorkerAndCreate(target, methodName, HTTP_METHOD.Put, routes);\n}\n\nfunction createWorkerForDelete(target: any, methodName: string, ...routes: string[]) {\n    registerWorkerAndCreate(target, methodName, HTTP_METHOD.Delete, routes);\n}\n\nexport const http = {\n    get, post, delete: del,\n    patch, put\n}","export * from './worker';\nexport * from './shields';\nexport * from './guards';\nexport * from './route';\nexport * from './default_worker';\nexport * from './assign';\nexport * from './singleton';\nexport * from './validate';\nexport * from './body';\nexport * from './req_method';","export * from './models';\nexport * from './abstracts';\nexport * from './decorators';\nexport * from './enums';\nexport * from './helpers';\nexport * from './types';\nexport * from './extra';\nexport * from './interfaces';"],"names":[],"sourceRoot":""}